{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "854d11e0",
   "metadata": {},
   "source": [
    "# Load data\n",
    "Merge train and test with Customer ID and Zip code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "85d778b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['demographics.csv',\n",
       " 'location.csv',\n",
       " 'satisfaction.csv',\n",
       " 'services.csv',\n",
       " 'status.csv']"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import preprocessing\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "import warnings\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from os import listdir\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "path = \"./data\"\n",
    "fileName_list = listdir(path)\n",
    "\n",
    "# take out test, train\n",
    "fileName_list = fileName_list[:7]\n",
    "fileName_list.remove(\"population.csv\")\n",
    "fileName_list.remove(\"sample_submission.csv\")\n",
    "fileName_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "15088df4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>Count_x</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Under 30</th>\n",
       "      <th>Senior Citizen</th>\n",
       "      <th>Married</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>Number of Dependents</th>\n",
       "      <th>Count_y</th>\n",
       "      <th>...</th>\n",
       "      <th>Contract</th>\n",
       "      <th>Paperless Billing</th>\n",
       "      <th>Payment Method</th>\n",
       "      <th>Monthly Charge</th>\n",
       "      <th>Total Charges</th>\n",
       "      <th>Total Refunds</th>\n",
       "      <th>Total Extra Data Charges</th>\n",
       "      <th>Total Long Distance Charges</th>\n",
       "      <th>Total Revenue</th>\n",
       "      <th>Churn Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0650-BWOZN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>37.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>One Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank Withdrawal</td>\n",
       "      <td>85.15</td>\n",
       "      <td>3030.60</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>892.85</td>\n",
       "      <td>3923.45</td>\n",
       "      <td>Competitor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0562-FGDCR</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>54.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>Month-to-Month</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>35.90</td>\n",
       "      <td>35.90</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>35.90</td>\n",
       "      <td>Competitor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6688-UZPWD</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>One Year</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Bank Withdrawal</td>\n",
       "      <td>20.05</td>\n",
       "      <td>746.75</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1435.70</td>\n",
       "      <td>2182.45</td>\n",
       "      <td>No Churn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2905-KFQUV</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>23.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>Month-to-Month</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>74.65</td>\n",
       "      <td>544.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>705.61</td>\n",
       "      <td>Competitor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9720-JJJOR</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Female</td>\n",
       "      <td>41.0</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>Two Year</td>\n",
       "      <td>No</td>\n",
       "      <td>Credit Card</td>\n",
       "      <td>25.80</td>\n",
       "      <td>1911.50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1164.16</td>\n",
       "      <td>3075.66</td>\n",
       "      <td>No Churn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5629</th>\n",
       "      <td>1178-PZGAB</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>Month-to-Month</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed Check</td>\n",
       "      <td>20.20</td>\n",
       "      <td>20.20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>42.15</td>\n",
       "      <td>62.35</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5630</th>\n",
       "      <td>4806-KEXQR</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Female</td>\n",
       "      <td>50.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>Credit Card</td>\n",
       "      <td>74.80</td>\n",
       "      <td>2971.70</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>742.80</td>\n",
       "      <td>3714.50</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5631</th>\n",
       "      <td>8809-RIHDD</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Male</td>\n",
       "      <td>60.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>Month-to-Month</td>\n",
       "      <td>No</td>\n",
       "      <td>Credit Card</td>\n",
       "      <td>45.65</td>\n",
       "      <td>985.05</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>410.97</td>\n",
       "      <td>1396.02</td>\n",
       "      <td>No Churn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5632</th>\n",
       "      <td>6663-JOCQO</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>One Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Credit Card</td>\n",
       "      <td>79.50</td>\n",
       "      <td>1264.20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>435.68</td>\n",
       "      <td>1699.88</td>\n",
       "      <td>No Churn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5633</th>\n",
       "      <td>7010-ZMVBF</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>71.0</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>Two Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank Withdrawal</td>\n",
       "      <td>NaN</td>\n",
       "      <td>605.45</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>293.79</td>\n",
       "      <td>899.24</td>\n",
       "      <td>No Churn</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5634 rows × 49 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Customer ID  Count_x  Gender   Age Under 30 Senior Citizen Married  \\\n",
       "0     0650-BWOZN      1.0    Male  37.0       No             No     NaN   \n",
       "1     0562-FGDCR      1.0     NaN  54.0       No             No      No   \n",
       "2     6688-UZPWD      1.0    Male   NaN      Yes             No     NaN   \n",
       "3     2905-KFQUV      1.0    Male  23.0      Yes             No      No   \n",
       "4     9720-JJJOR      1.0  Female  41.0       No            NaN     Yes   \n",
       "...          ...      ...     ...   ...      ...            ...     ...   \n",
       "5629  1178-PZGAB      1.0    Male  27.0      Yes             No     NaN   \n",
       "5630  4806-KEXQR      1.0  Female  50.0       No             No      No   \n",
       "5631  8809-RIHDD      NaN    Male  60.0       No             No      No   \n",
       "5632  6663-JOCQO      1.0  Female   NaN       No             No      No   \n",
       "5633  7010-ZMVBF      1.0     NaN  71.0       No            Yes     Yes   \n",
       "\n",
       "     Dependents  Number of Dependents  Count_y  ...        Contract  \\\n",
       "0            No                   0.0      NaN  ...        One Year   \n",
       "1            No                   0.0      1.0  ...  Month-to-Month   \n",
       "2           Yes                   NaN      1.0  ...        One Year   \n",
       "3            No                   0.0      1.0  ...  Month-to-Month   \n",
       "4            No                   0.0      1.0  ...        Two Year   \n",
       "...         ...                   ...      ...  ...             ...   \n",
       "5629         No                   0.0      NaN  ...  Month-to-Month   \n",
       "5630        NaN                   0.0      1.0  ...             NaN   \n",
       "5631        Yes                   2.0      NaN  ...  Month-to-Month   \n",
       "5632        Yes                   3.0      NaN  ...        One Year   \n",
       "5633         No                   0.0      1.0  ...        Two Year   \n",
       "\n",
       "     Paperless Billing   Payment Method  Monthly Charge Total Charges  \\\n",
       "0                  Yes  Bank Withdrawal           85.15       3030.60   \n",
       "1                   No              NaN           35.90         35.90   \n",
       "2                  NaN  Bank Withdrawal           20.05        746.75   \n",
       "3                  NaN              NaN           74.65        544.55   \n",
       "4                   No      Credit Card           25.80       1911.50   \n",
       "...                ...              ...             ...           ...   \n",
       "5629                No     Mailed Check           20.20         20.20   \n",
       "5630                No      Credit Card           74.80       2971.70   \n",
       "5631                No      Credit Card           45.65        985.05   \n",
       "5632               Yes      Credit Card           79.50       1264.20   \n",
       "5633               Yes  Bank Withdrawal             NaN        605.45   \n",
       "\n",
       "      Total Refunds  Total Extra Data Charges  Total Long Distance Charges  \\\n",
       "0               0.0                       0.0                       892.85   \n",
       "1               0.0                       0.0                         0.00   \n",
       "2               NaN                       0.0                      1435.70   \n",
       "3               0.0                      10.0                          NaN   \n",
       "4               0.0                       NaN                      1164.16   \n",
       "...             ...                       ...                          ...   \n",
       "5629            NaN                       0.0                        42.15   \n",
       "5630            0.0                       0.0                       742.80   \n",
       "5631            NaN                       0.0                       410.97   \n",
       "5632            0.0                       0.0                       435.68   \n",
       "5633            0.0                       0.0                       293.79   \n",
       "\n",
       "      Total Revenue  Churn Category  \n",
       "0           3923.45      Competitor  \n",
       "1             35.90      Competitor  \n",
       "2           2182.45        No Churn  \n",
       "3            705.61      Competitor  \n",
       "4           3075.66        No Churn  \n",
       "...             ...             ...  \n",
       "5629          62.35             NaN  \n",
       "5630        3714.50             NaN  \n",
       "5631        1396.02        No Churn  \n",
       "5632        1699.88        No Churn  \n",
       "5633         899.24        No Churn  \n",
       "\n",
       "[5634 rows x 49 columns]"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train = pd.read_csv('./data/Train_IDs.csv')\n",
    "test = pd.read_csv('./data/Test_IDs.csv')\n",
    "\n",
    "for i in fileName_list:\n",
    "    target_path = path + \"/\" + i\n",
    "    target_data = pd.read_csv(target_path)\n",
    "    #train = pd.concat([train, target_data], axis=1, join=\"inner\")\n",
    "    if i == \"location.csv\":\n",
    "        population_data = pd.read_csv(\"./data/population.csv\")\n",
    "        del population_data[\"ID\"]\n",
    "        target_data = pd.merge(target_data, population_data, how=\"left\", on=\"Zip Code\")\n",
    "    train = pd.merge(train, target_data, how=\"left\", on=\"Customer ID\")\n",
    "    test = pd.merge(test, target_data, how=\"left\", on=\"Customer ID\")\n",
    "train"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65e35ebd",
   "metadata": {},
   "source": [
    "# Data Analysis\n",
    "Count被記錄了三份, 分別在demographics、location、services裡都有一份，其中只要非空，皆為1。 然而三份之中，非空的數量有些許不同，分別為4310、4323、4317"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "4c9636b4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 5634 entries, 0 to 5633\n",
      "Data columns (total 49 columns):\n",
      " #   Column                             Non-Null Count  Dtype  \n",
      "---  ------                             --------------  -----  \n",
      " 0   Customer ID                        5634 non-null   object \n",
      " 1   Count_x                            4317 non-null   float64\n",
      " 2   Gender                             4308 non-null   object \n",
      " 3   Age                                4316 non-null   float64\n",
      " 4   Under 30                           4337 non-null   object \n",
      " 5   Senior Citizen                     4314 non-null   object \n",
      " 6   Married                            4317 non-null   object \n",
      " 7   Dependents                         4305 non-null   object \n",
      " 8   Number of Dependents               4318 non-null   float64\n",
      " 9   Count_y                            4323 non-null   float64\n",
      " 10  Country                            4337 non-null   object \n",
      " 11  State                              4330 non-null   object \n",
      " 12  City                               4335 non-null   object \n",
      " 13  Zip Code                           4329 non-null   float64\n",
      " 14  Lat Long                           4353 non-null   object \n",
      " 15  Latitude                           4325 non-null   float64\n",
      " 16  Longitude                          4315 non-null   float64\n",
      " 17  Population                         4329 non-null   float64\n",
      " 18  Satisfaction Score                 4296 non-null   float64\n",
      " 19  Count                              4310 non-null   float64\n",
      " 20  Quarter                            4313 non-null   object \n",
      " 21  Referred a Friend                  4305 non-null   object \n",
      " 22  Number of Referrals                4337 non-null   float64\n",
      " 23  Tenure in Months                   4330 non-null   float64\n",
      " 24  Offer                              4324 non-null   object \n",
      " 25  Phone Service                      4308 non-null   object \n",
      " 26  Avg Monthly Long Distance Charges  4309 non-null   float64\n",
      " 27  Multiple Lines                     4307 non-null   object \n",
      " 28  Internet Service                   4323 non-null   object \n",
      " 29  Internet Type                      4294 non-null   object \n",
      " 30  Avg Monthly GB Download            4307 non-null   float64\n",
      " 31  Online Security                    4329 non-null   object \n",
      " 32  Online Backup                      4301 non-null   object \n",
      " 33  Device Protection Plan             4328 non-null   object \n",
      " 34  Premium Tech Support               4327 non-null   object \n",
      " 35  Streaming TV                       4324 non-null   object \n",
      " 36  Streaming Movies                   4317 non-null   object \n",
      " 37  Streaming Music                    4300 non-null   object \n",
      " 38  Unlimited Data                     4334 non-null   object \n",
      " 39  Contract                           4319 non-null   object \n",
      " 40  Paperless Billing                  4314 non-null   object \n",
      " 41  Payment Method                     4307 non-null   object \n",
      " 42  Monthly Charge                     4336 non-null   float64\n",
      " 43  Total Charges                      4322 non-null   float64\n",
      " 44  Total Refunds                      4310 non-null   float64\n",
      " 45  Total Extra Data Charges           4323 non-null   float64\n",
      " 46  Total Long Distance Charges        4339 non-null   float64\n",
      " 47  Total Revenue                      4324 non-null   float64\n",
      " 48  Churn Category                     4226 non-null   object \n",
      "dtypes: float64(20), object(29)\n",
      "memory usage: 2.1+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "c93b1712",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1409 entries, 0 to 1408\n",
      "Data columns (total 49 columns):\n",
      " #   Column                             Non-Null Count  Dtype  \n",
      "---  ------                             --------------  -----  \n",
      " 0   Customer ID                        1409 non-null   object \n",
      " 1   Count_x                            1076 non-null   float64\n",
      " 2   Gender                             1085 non-null   object \n",
      " 3   Age                                1077 non-null   float64\n",
      " 4   Under 30                           1056 non-null   object \n",
      " 5   Senior Citizen                     1079 non-null   object \n",
      " 6   Married                            1076 non-null   object \n",
      " 7   Dependents                         1088 non-null   object \n",
      " 8   Number of Dependents               1075 non-null   float64\n",
      " 9   Count_y                            1070 non-null   float64\n",
      " 10  Country                            1056 non-null   object \n",
      " 11  State                              1063 non-null   object \n",
      " 12  City                               1058 non-null   object \n",
      " 13  Zip Code                           1064 non-null   float64\n",
      " 14  Lat Long                           1040 non-null   object \n",
      " 15  Latitude                           1068 non-null   float64\n",
      " 16  Longitude                          1078 non-null   float64\n",
      " 17  Population                         1064 non-null   float64\n",
      " 18  Satisfaction Score                 1097 non-null   float64\n",
      " 19  Count                              1083 non-null   float64\n",
      " 20  Quarter                            1080 non-null   object \n",
      " 21  Referred a Friend                  1088 non-null   object \n",
      " 22  Number of Referrals                1056 non-null   float64\n",
      " 23  Tenure in Months                   1063 non-null   float64\n",
      " 24  Offer                              1069 non-null   object \n",
      " 25  Phone Service                      1085 non-null   object \n",
      " 26  Avg Monthly Long Distance Charges  1084 non-null   float64\n",
      " 27  Multiple Lines                     1086 non-null   object \n",
      " 28  Internet Service                   1070 non-null   object \n",
      " 29  Internet Type                      1099 non-null   object \n",
      " 30  Avg Monthly GB Download            1086 non-null   float64\n",
      " 31  Online Security                    1064 non-null   object \n",
      " 32  Online Backup                      1092 non-null   object \n",
      " 33  Device Protection Plan             1065 non-null   object \n",
      " 34  Premium Tech Support               1066 non-null   object \n",
      " 35  Streaming TV                       1069 non-null   object \n",
      " 36  Streaming Movies                   1076 non-null   object \n",
      " 37  Streaming Music                    1093 non-null   object \n",
      " 38  Unlimited Data                     1059 non-null   object \n",
      " 39  Contract                           1074 non-null   object \n",
      " 40  Paperless Billing                  1079 non-null   object \n",
      " 41  Payment Method                     1086 non-null   object \n",
      " 42  Monthly Charge                     1057 non-null   float64\n",
      " 43  Total Charges                      1071 non-null   float64\n",
      " 44  Total Refunds                      1083 non-null   float64\n",
      " 45  Total Extra Data Charges           1070 non-null   float64\n",
      " 46  Total Long Distance Charges        1054 non-null   float64\n",
      " 47  Total Revenue                      1069 non-null   float64\n",
      " 48  Churn Category                     0 non-null      object \n",
      "dtypes: float64(20), object(29)\n",
      "memory usage: 550.4+ KB\n"
     ]
    }
   ],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "79276a61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Count_x</th>\n",
       "      <th>Age</th>\n",
       "      <th>Number of Dependents</th>\n",
       "      <th>Count_y</th>\n",
       "      <th>Zip Code</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Population</th>\n",
       "      <th>Satisfaction Score</th>\n",
       "      <th>Count</th>\n",
       "      <th>Number of Referrals</th>\n",
       "      <th>Tenure in Months</th>\n",
       "      <th>Avg Monthly Long Distance Charges</th>\n",
       "      <th>Avg Monthly GB Download</th>\n",
       "      <th>Monthly Charge</th>\n",
       "      <th>Total Charges</th>\n",
       "      <th>Total Refunds</th>\n",
       "      <th>Total Extra Data Charges</th>\n",
       "      <th>Total Long Distance Charges</th>\n",
       "      <th>Total Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4317.0</td>\n",
       "      <td>4316.000000</td>\n",
       "      <td>4318.000000</td>\n",
       "      <td>4323.0</td>\n",
       "      <td>4329.000000</td>\n",
       "      <td>4325.000000</td>\n",
       "      <td>4315.000000</td>\n",
       "      <td>4329.000000</td>\n",
       "      <td>4296.000000</td>\n",
       "      <td>4310.0</td>\n",
       "      <td>4337.000000</td>\n",
       "      <td>4330.000000</td>\n",
       "      <td>4309.000000</td>\n",
       "      <td>4307.000000</td>\n",
       "      <td>4336.000000</td>\n",
       "      <td>4322.000000</td>\n",
       "      <td>4310.000000</td>\n",
       "      <td>4323.000000</td>\n",
       "      <td>4339.000000</td>\n",
       "      <td>4324.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.0</td>\n",
       "      <td>46.701112</td>\n",
       "      <td>0.479620</td>\n",
       "      <td>1.0</td>\n",
       "      <td>93474.305151</td>\n",
       "      <td>36.184421</td>\n",
       "      <td>-119.753591</td>\n",
       "      <td>22439.556249</td>\n",
       "      <td>3.262337</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.902006</td>\n",
       "      <td>32.567667</td>\n",
       "      <td>22.950278</td>\n",
       "      <td>20.452055</td>\n",
       "      <td>64.400104</td>\n",
       "      <td>2282.358697</td>\n",
       "      <td>1.955443</td>\n",
       "      <td>6.662040</td>\n",
       "      <td>752.510168</td>\n",
       "      <td>3044.473534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0</td>\n",
       "      <td>16.823413</td>\n",
       "      <td>0.973795</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1850.814739</td>\n",
       "      <td>2.446586</td>\n",
       "      <td>2.147933</td>\n",
       "      <td>21299.254720</td>\n",
       "      <td>1.200247</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.973567</td>\n",
       "      <td>24.601592</td>\n",
       "      <td>15.464678</td>\n",
       "      <td>20.390958</td>\n",
       "      <td>30.049952</td>\n",
       "      <td>2259.136748</td>\n",
       "      <td>7.838492</td>\n",
       "      <td>24.487024</td>\n",
       "      <td>847.861924</td>\n",
       "      <td>2861.429737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.0</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>90001.000000</td>\n",
       "      <td>32.555828</td>\n",
       "      <td>-124.301372</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>18.250000</td>\n",
       "      <td>18.850000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>21.360000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.0</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>92082.000000</td>\n",
       "      <td>33.991782</td>\n",
       "      <td>-121.765866</td>\n",
       "      <td>2723.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.190000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>35.050000</td>\n",
       "      <td>416.750000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>69.810000</td>\n",
       "      <td>643.335000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.0</td>\n",
       "      <td>46.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>93516.000000</td>\n",
       "      <td>36.186867</td>\n",
       "      <td>-119.521126</td>\n",
       "      <td>17846.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>22.560000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>70.275000</td>\n",
       "      <td>1397.475000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>413.280000</td>\n",
       "      <td>2111.415000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.0</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>95321.000000</td>\n",
       "      <td>38.128087</td>\n",
       "      <td>-117.993368</td>\n",
       "      <td>36186.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>36.470000</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>89.700000</td>\n",
       "      <td>3778.687500</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1199.360000</td>\n",
       "      <td>4785.692500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.0</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>96150.000000</td>\n",
       "      <td>41.962127</td>\n",
       "      <td>-114.192901</td>\n",
       "      <td>105285.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>49.990000</td>\n",
       "      <td>85.000000</td>\n",
       "      <td>118.750000</td>\n",
       "      <td>8672.450000</td>\n",
       "      <td>49.790000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>3564.000000</td>\n",
       "      <td>11979.340000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Count_x          Age  Number of Dependents  Count_y      Zip Code  \\\n",
       "count   4317.0  4316.000000           4318.000000   4323.0   4329.000000   \n",
       "mean       1.0    46.701112              0.479620      1.0  93474.305151   \n",
       "std        0.0    16.823413              0.973795      0.0   1850.814739   \n",
       "min        1.0    19.000000              0.000000      1.0  90001.000000   \n",
       "25%        1.0    33.000000              0.000000      1.0  92082.000000   \n",
       "50%        1.0    46.000000              0.000000      1.0  93516.000000   \n",
       "75%        1.0    60.000000              0.000000      1.0  95321.000000   \n",
       "max        1.0    80.000000              9.000000      1.0  96150.000000   \n",
       "\n",
       "          Latitude    Longitude     Population  Satisfaction Score   Count  \\\n",
       "count  4325.000000  4315.000000    4329.000000         4296.000000  4310.0   \n",
       "mean     36.184421  -119.753591   22439.556249            3.262337     1.0   \n",
       "std       2.446586     2.147933   21299.254720            1.200247     0.0   \n",
       "min      32.555828  -124.301372      11.000000            1.000000     1.0   \n",
       "25%      33.991782  -121.765866    2723.000000            3.000000     1.0   \n",
       "50%      36.186867  -119.521126   17846.000000            3.000000     1.0   \n",
       "75%      38.128087  -117.993368   36186.000000            4.000000     1.0   \n",
       "max      41.962127  -114.192901  105285.000000            5.000000     1.0   \n",
       "\n",
       "       Number of Referrals  Tenure in Months  \\\n",
       "count          4337.000000       4330.000000   \n",
       "mean              1.902006         32.567667   \n",
       "std               2.973567         24.601592   \n",
       "min               0.000000          1.000000   \n",
       "25%               0.000000          9.000000   \n",
       "50%               0.000000         29.000000   \n",
       "75%               3.000000         56.000000   \n",
       "max              11.000000         72.000000   \n",
       "\n",
       "       Avg Monthly Long Distance Charges  Avg Monthly GB Download  \\\n",
       "count                        4309.000000              4307.000000   \n",
       "mean                           22.950278                20.452055   \n",
       "std                            15.464678                20.390958   \n",
       "min                             0.000000                 0.000000   \n",
       "25%                             9.190000                 3.000000   \n",
       "50%                            22.560000                17.000000   \n",
       "75%                            36.470000                27.000000   \n",
       "max                            49.990000                85.000000   \n",
       "\n",
       "       Monthly Charge  Total Charges  Total Refunds  Total Extra Data Charges  \\\n",
       "count     4336.000000    4322.000000    4310.000000               4323.000000   \n",
       "mean        64.400104    2282.358697       1.955443                  6.662040   \n",
       "std         30.049952    2259.136748       7.838492                 24.487024   \n",
       "min         18.250000      18.850000       0.000000                  0.000000   \n",
       "25%         35.050000     416.750000       0.000000                  0.000000   \n",
       "50%         70.275000    1397.475000       0.000000                  0.000000   \n",
       "75%         89.700000    3778.687500       0.000000                  0.000000   \n",
       "max        118.750000    8672.450000      49.790000                150.000000   \n",
       "\n",
       "       Total Long Distance Charges  Total Revenue  \n",
       "count                  4339.000000    4324.000000  \n",
       "mean                    752.510168    3044.473534  \n",
       "std                     847.861924    2861.429737  \n",
       "min                       0.000000      21.360000  \n",
       "25%                      69.810000     643.335000  \n",
       "50%                     413.280000    2111.415000  \n",
       "75%                    1199.360000    4785.692500  \n",
       "max                    3564.000000   11979.340000  "
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "4adc98e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Churn Category', ylabel='count'>"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(train['Churn Category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "61f81b86",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD4CAYAAAAXUaZHAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAPXElEQVR4nO3da4xdV32G8eclJlxCi3OZWq7tdoKwQFHVOKkVjEAVJIXmgnA+QBpEixW58peghkJFDV8qUCslUkUAqYpkEVpTcQuBKFZAgOUE9SIRGJOQkJgoJjjYVhIPkBhoBG3g3w9nGU4c23PGM+OZs3h+0uistfY6Z6+lOeedPWv23pOqQpLUl+ct9gAkSfPPcJekDhnuktQhw12SOmS4S1KHli32AADOOeecmpycXOxhSNJY2b179w+rauJY25ZEuE9OTjI1NbXYw5CksZLk0eNtc1lGkjpkuEtShwx3SeqQ4S5JHTLcJalDhrskdchwl6QOGe6S1CHDXZI6tCSuUJ2Lya1fXLR977v+ikXbtySdiEfuktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SeqQ4S5JHTLcJalDhrskdchwl6QOGe6S1KGRwj3JviT3J7k3yVRrOyvJziQPt8czW3uSfDTJ3iT3JblwIScgSXqu2Ry5v76q1lXV+lbfCuyqqrXArlYHuAxY2762ADfN12AlSaOZy7LMRmB7K28Hrhxq/0QNfB1YnmTlHPYjSZqlUcO9gK8m2Z1kS2tbUVWPtfLjwIpWXgXsH3rugdb2LEm2JJlKMjU9PX0SQ5ckHc+yEfu9tqoOJvk9YGeS7w5vrKpKUrPZcVVtA7YBrF+/flbPlSSd2EhH7lV1sD0eAm4DLgKeOLLc0h4Pte4HgTVDT1/d2iRJp8iMR+5JzgCeV1U/beU3Ah8EdgCbgOvb4+3tKTuAdyb5DPAq4PDQ8o10Uia3fnFR9rvv+isWZb/SXI2yLLMCuC3Jkf6fqqovJ/kmcEuSzcCjwFWt/5eAy4G9wNPANfM+ai2axQpZSbMzY7hX1SPA+cdo/xFwyTHaC7h2XkYnSTopXqEqSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHDHdJ6tCoNw6Tfist5hW53vpAc+GRuyR1yHCXpA65LCMtUd4JU3Phkbskdcgj9znw9reSliqP3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtSh0YO9ySnJbknyR2tfm6Su5PsTfLZJKe39he0+t62fXKBxi5JOo7ZHLlfB+wZqt8A3FhVLweeBDa39s3Ak639xtZPknQKjRTuSVYDVwAfa/UAFwO3ti7bgStbeWOr07Zf0vpLkk6RUY/cPwy8F/hVq58NPFVVz7T6AWBVK68C9gO07Ydb/2dJsiXJVJKp6enpkxu9JOmYZgz3JG8CDlXV7vnccVVtq6r1VbV+YmJiPl9akn7rjfI/VF8DvDnJ5cALgd8FPgIsT7KsHZ2vBg62/geBNcCBJMuAlwI/mveRS5KOa8Yj96p6X1WtrqpJ4Grgzqp6O3AX8JbWbRNweyvvaHXa9jurquZ11JKkE5rLee5/D7w7yV4Ga+o3t/abgbNb+7uBrXMboiRptkZZlvm1qvoa8LVWfgS46Bh9fg68dR7GJkk6SV6hKkkdMtwlqUOGuyR1yHCXpA4Z7pLUoVmdLSOpf5Nbv7ho+953/RWLtu/eeOQuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SeqQ4S5JHTLcJalDhrskdchwl6QO+Q+yJf3W6/GfgnvkLkkdmjHck7wwyTeSfDvJA0k+0NrPTXJ3kr1JPpvk9Nb+glbf27ZPLvAcJElHGeXI/RfAxVV1PrAOuDTJBuAG4MaqejnwJLC59d8MPNnab2z9JEmn0IzhXgM/a9Xnt68CLgZube3bgStbeWOr07ZfkiTzNWBJ0sxGWnNPclqSe4FDwE7ge8BTVfVM63IAWNXKq4D9AG37YeDsY7zmliRTSaamp6fnNAlJ0rONFO5V9cuqWgesBi4CXjnXHVfVtqpaX1XrJyYm5vpykqQhszpbpqqeAu4CXg0sT3LkVMrVwMFWPgisAWjbXwr8aD4GK0kazShny0wkWd7KLwLeAOxhEPJvad02Abe38o5Wp22/s6pqHscsSZrBKBcxrQS2JzmNwQ+DW6rqjiQPAp9J8o/APcDNrf/NwL8n2Qv8GLh6AcYtSTqBGcO9qu4DLjhG+yMM1t+Pbv858NZ5GZ0k6aR4haokdchwl6QOGe6S1CHDXZI65C1/JS0Zi3nr3d545C5JHTLcJalDhrskdchwl6QOGe6S1CHDXZI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtSh2YM9yRrktyV5MEkDyS5rrWflWRnkofb45mtPUk+mmRvkvuSXLjQk5AkPdsoR+7PAO+pqvOADcC1Sc4DtgK7qmotsKvVAS4D1ravLcBN8z5qSdIJzRjuVfVYVX2rlX8K7AFWARuB7a3bduDKVt4IfKIGvg4sT7JyvgcuSTq+Wa25J5kELgDuBlZU1WNt0+PAilZeBewfetqB1iZJOkVGDvckLwE+D7yrqn4yvK2qCqjZ7DjJliRTSaamp6dn81RJ0gxGCvckz2cQ7J+sqi+05ieOLLe0x0Ot/SCwZujpq1vbs1TVtqpaX1XrJyYmTnb8kqRjGOVsmQA3A3uq6kNDm3YAm1p5E3D7UPs72lkzG4DDQ8s3kqRTYNkIfV4D/BVwf5J7W9v7geuBW5JsBh4FrmrbvgRcDuwFngaumc8BS5JmNmO4V9V/ATnO5kuO0b+Aa+c4LknSHHiFqiR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SeqQ4S5JHTLcJalDhrskdchwl6QOGe6S1CHDXZI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtSh2YM9yQfT3IoyXeG2s5KsjPJw+3xzNaeJB9NsjfJfUkuXMjBS5KObZQj938DLj2qbSuwq6rWArtaHeAyYG372gLcND/DlCTNxozhXlX/Afz4qOaNwPZW3g5cOdT+iRr4OrA8ycp5GqskaUQnu+a+oqoea+XHgRWtvArYP9TvQGt7jiRbkkwlmZqenj7JYUiSjmXOf1CtqgLqJJ63rarWV9X6iYmJuQ5DkjTkZMP9iSPLLe3xUGs/CKwZ6re6tUmSTqGTDfcdwKZW3gTcPtT+jnbWzAbg8NDyjSTpFFk2U4cknwZeB5yT5ADwD8D1wC1JNgOPAle17l8CLgf2Ak8D1yzAmCVJM5gx3KvqbcfZdMkx+hZw7VwHJUmaG69QlaQOGe6S1CHDXZI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SeqQ4S5JHTLcJalDhrskdchwl6QOGe6S1CHDXZI6ZLhLUocWJNyTXJrkoSR7k2xdiH1Iko5v3sM9yWnAvwCXAecBb0ty3nzvR5J0fAtx5H4RsLeqHqmq/wU+A2xcgP1Iko5j2QK85ipg/1D9APCqozsl2QJsadWfJXloHsdwDvDDeXy9xeI8lhbnsbR0MY/cMKd5/OHxNixEuI+kqrYB2xbitZNMVdX6hXjtU8l5LC3OY2lxHie2EMsyB4E1Q/XVrU2SdIosRLh/E1ib5NwkpwNXAzsWYD+SpOOY92WZqnomyTuBrwCnAR+vqgfmez8zWJDlnkXgPJYW57G0OI8TSFUtxOtKkhaRV6hKUocMd0nq0NiHe5I1Se5K8mCSB5Jc19rPSrIzycPt8czFHuuJJHlhkm8k+Xabxwda+7lJ7m63cvhs+yP1kpbktCT3JLmj1cdxDvuS3J/k3iRTrW2s3lMASZYnuTXJd5PsSfLqcZtHkle078ORr58kede4zQMgyd+2z/d3kny6fe4X5PMx9uEOPAO8p6rOAzYA17bbHWwFdlXVWmBXqy9lvwAurqrzgXXApUk2ADcAN1bVy4Engc2LN8SRXQfsGaqP4xwAXl9V64bOQR639xTAR4AvV9UrgfMZfF/Gah5V9VD7PqwD/gR4GriNMZtHklXA3wDrq+qPGJxwcjUL9fmoqq6+gNuBNwAPAStb20rgocUe2yzm8GLgWwyu7P0hsKy1vxr4ymKPb4axr2bwQbsYuAPIuM2hjXMfcM5RbWP1ngJeCnyfduLEuM7jqLG/EfjvcZwHv7l6/ywGZyreAfz5Qn0+ejhy/7Ukk8AFwN3Aiqp6rG16HFixWOMaVVvOuBc4BOwEvgc8VVXPtC4HGLxBlrIPA+8FftXqZzN+cwAo4KtJdrdbZcD4vafOBaaBf23LZB9LcgbjN49hVwOfbuWxmkdVHQT+GfgB8BhwGNjNAn0+ugn3JC8BPg+8q6p+MrytBj8Sl/w5n1X1yxr86rmawQ3YXrm4I5qdJG8CDlXV7sUeyzx4bVVdyODuptcm+dPhjWPynloGXAjcVFUXAP/DUUsXYzIPANpa9JuBzx29bRzm0f4msJHBD93fB84ALl2o/XUR7kmezyDYP1lVX2jNTyRZ2bavZHA0PBaq6ingLga/oi1PcuRis6V+K4fXAG9Oso/B3UAvZrDmO05zAH59lEVVHWKwvnsR4/eeOgAcqKq7W/1WBmE/bvM44jLgW1X1RKuP2zz+DPh+VU1X1f8BX2DwmVmQz8fYh3uSADcDe6rqQ0ObdgCbWnkTg7X4JSvJRJLlrfwiBn832MMg5N/Sui3peVTV+6pqdVVNMvj1+c6qejtjNAeAJGck+Z0jZQbrvN9hzN5TVfU4sD/JK1rTJcCDjNk8hryN3yzJwPjN4wfAhiQvbrl15PuxIJ+Psb9CNclrgf8E7uc367zvZ7DufgvwB8CjwFVV9eNFGeQIkvwxsJ3BX9CfB9xSVR9M8jIGR8FnAfcAf1lVv1i8kY4myeuAv6uqN43bHNp4b2vVZcCnquqfkpzNGL2nAJKsAz4GnA48AlxDe38xXvM4g0E4vqyqDre2cfx+fAD4CwZn+d0D/DWDNfZ5/3yMfbhLkp5r7JdlJEnPZbhLUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDv0/tRQFJR5ktLoAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(train['Age'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "cf4a5d5b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Age', ylabel='count'>"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import rcParams\n",
    "\n",
    "rcParams['figure.figsize'] = 25,8\n",
    "\n",
    "sns.countplot(train['Age'], hue = train['Churn Category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "6854113a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1b00ed7d518>"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.FacetGrid(train, col='Churn Category')\n",
    "g.map(sns.distplot, 'Age', kde=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "54a9dd74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(train['Number of Dependents'], width=0.4)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "ccff130f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Number of Dependents', ylabel='count'>"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(train['Number of Dependents'], hue = train['Churn Category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "05aeae0e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1b00fce5e10>"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.FacetGrid(train, col='Churn Category')\n",
    "g.map(sns.distplot, 'Number of Dependents', kde=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "6a3df007",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Count_x', ylabel='count'>"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(train['Count_x'], hue = train['Churn Category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "56c739ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Count_y', ylabel='count'>"
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(train['Count_y'], hue = train['Churn Category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "df09d9e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Count', ylabel='count'>"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(train['Count'], hue = train['Churn Category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "9520bf82",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1b00ed909e8>"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.FacetGrid(train, col='Churn Category')\n",
    "g.map(sns.distplot, 'Population', kde=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "12365ffc",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1b0108e1e48>"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.FacetGrid(train, col='Churn Category')\n",
    "g.map(sns.distplot, 'Satisfaction Score', kde=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "b8f081b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1b0108a76a0>"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.FacetGrid(train, col='Churn Category')\n",
    "g.map(sns.distplot, 'Number of Referrals', kde=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "57b99369",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1b012984438>"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.FacetGrid(train, col='Churn Category')\n",
    "g.map(sns.distplot, 'Tenure in Months', kde=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "2f18b8f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Under 30', ylabel='count'>"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(train['Under 30'], hue = train['Churn Category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "7ef7d3ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1b013024550>"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x216 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# satisfaction / Number of Referral\n",
    "g = sns.FacetGrid(train, col='Satisfaction Score')\n",
    "g.map(sns.distplot, 'Number of Referrals', kde=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "6828b1a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1b0132a20f0>"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Tenure in Months\n",
    "g = sns.FacetGrid(train, col='Churn Category')\n",
    "g.map(sns.distplot, 'Tenure in Months', kde=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "f9330df9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Offer', ylabel='count'>"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Offer\n",
    "sns.countplot(train['Offer'], hue = train['Churn Category'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c771e65",
   "metadata": {},
   "source": [
    "# Preprocess\n",
    "\n",
    "Count 三個merge 起來了, 三個之中有不為1的 補1<br>\n",
    "性別看分布、美國性別比大約55, 隨機補 0 or 1<br>\n",
    "Age 暫時補 平均數<br>\n",
    "同時補上Under 30跟Senior Citizen<br>\n",
    "\n",
    "同住人數(Number of Dependents) 暫時補0, 因為從與最後分類德關係來看, 大於1有很大的影響<br>\n",
    "Note: 後期可能可以用Married, Age, 推薦人數...預測<br>\n",
    "\n",
    "8   Country<br>\n",
    "9   State<br>\n",
    "10  City<br>\n",
    "11  Zip Code<br>\n",
    "12  Lat Long<br>\n",
    "13  Latitude<br>\n",
    "14  Longitude<br>\n",
    "暫時丟掉"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "46cbb306",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Churn Category, 最終要預測的類別, 沒有值的都丟掉\n",
    "# filt = train['Churn Category'].notnull()\n",
    "# train = train.loc[filt]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "4c24582d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 5634 entries, 0 to 5633\n",
      "Data columns (total 49 columns):\n",
      " #   Column                             Non-Null Count  Dtype  \n",
      "---  ------                             --------------  -----  \n",
      " 0   Customer ID                        5634 non-null   object \n",
      " 1   Count_x                            4317 non-null   float64\n",
      " 2   Gender                             4308 non-null   object \n",
      " 3   Age                                4316 non-null   float64\n",
      " 4   Under 30                           4337 non-null   object \n",
      " 5   Senior Citizen                     4314 non-null   object \n",
      " 6   Married                            4317 non-null   object \n",
      " 7   Dependents                         4305 non-null   object \n",
      " 8   Number of Dependents               4318 non-null   float64\n",
      " 9   Count_y                            4323 non-null   float64\n",
      " 10  Country                            4337 non-null   object \n",
      " 11  State                              4330 non-null   object \n",
      " 12  City                               4335 non-null   object \n",
      " 13  Zip Code                           4329 non-null   float64\n",
      " 14  Lat Long                           4353 non-null   object \n",
      " 15  Latitude                           4325 non-null   float64\n",
      " 16  Longitude                          4315 non-null   float64\n",
      " 17  Population                         4329 non-null   float64\n",
      " 18  Satisfaction Score                 4296 non-null   float64\n",
      " 19  Count                              4310 non-null   float64\n",
      " 20  Quarter                            4313 non-null   object \n",
      " 21  Referred a Friend                  4305 non-null   object \n",
      " 22  Number of Referrals                4337 non-null   float64\n",
      " 23  Tenure in Months                   4330 non-null   float64\n",
      " 24  Offer                              4324 non-null   object \n",
      " 25  Phone Service                      4308 non-null   object \n",
      " 26  Avg Monthly Long Distance Charges  4309 non-null   float64\n",
      " 27  Multiple Lines                     4307 non-null   object \n",
      " 28  Internet Service                   4323 non-null   object \n",
      " 29  Internet Type                      4294 non-null   object \n",
      " 30  Avg Monthly GB Download            4307 non-null   float64\n",
      " 31  Online Security                    4329 non-null   object \n",
      " 32  Online Backup                      4301 non-null   object \n",
      " 33  Device Protection Plan             4328 non-null   object \n",
      " 34  Premium Tech Support               4327 non-null   object \n",
      " 35  Streaming TV                       4324 non-null   object \n",
      " 36  Streaming Movies                   4317 non-null   object \n",
      " 37  Streaming Music                    4300 non-null   object \n",
      " 38  Unlimited Data                     4334 non-null   object \n",
      " 39  Contract                           4319 non-null   object \n",
      " 40  Paperless Billing                  4314 non-null   object \n",
      " 41  Payment Method                     4307 non-null   object \n",
      " 42  Monthly Charge                     4336 non-null   float64\n",
      " 43  Total Charges                      4322 non-null   float64\n",
      " 44  Total Refunds                      4310 non-null   float64\n",
      " 45  Total Extra Data Charges           4323 non-null   float64\n",
      " 46  Total Long Distance Charges        4339 non-null   float64\n",
      " 47  Total Revenue                      4324 non-null   float64\n",
      " 48  Churn Category                     4226 non-null   object \n",
      "dtypes: float64(20), object(29)\n",
      "memory usage: 2.3+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "d1ce129a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 將train, test合併處理, 並新增一個欄位用以標記\n",
    "train = pd.concat([train.assign(is_train = 1), test.assign(is_train = 0)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "df53ab51",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Count_merge', ylabel='count'>"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Merge field 'Count', 'Count_x', 'Count_y'\n",
    "train['Count'] = train['Count'].fillna(0)\n",
    "train['Count_x'] = train['Count'].fillna(0)\n",
    "train['Count_y'] = train['Count'].fillna(0)\n",
    "\n",
    "# Add up three field\n",
    "train['Count_merge'] = train['Count'] + train['Count_x'] + train['Count_y']\n",
    "# if the result bigger than 1, then the value set to 1. Or be 0.\n",
    "train['Count_merge'] = train['Count_merge'].apply(lambda x: 1 if x > 0 else 0)\n",
    "train = train.drop(['Count', 'Count_x', 'Count_y'], axis=1)\n",
    "sns.countplot(train['Count_merge'], hue = train['Churn Category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "fec8e81f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Gender', ylabel='count'>"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABa8AAAHgCAYAAACivJE6AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAA6t0lEQVR4nO3de7xXVZ0//tfyQOC9VHQmLwOapiBwlAM6kpdkMvOapaWpgWVG38yazKScb2rZbXLStJkcf5pGMkqRtymdJlHymgYOeQEqddAw81qmeUlw/f7g4/miogKecz4bfT4fj/M4e6+19trvfc4fn8PL5dql1hoAAAAAAGiSVdpdAAAAAAAAvJDwGgAAAACAxhFeAwAAAADQOMJrAAAAAAAaR3gNAAAAAEDjCK8BAAAAAGicfu0uoDest956dfDgwe0uAwAAAACAlzFr1qyHaq2Dltb3mgyvBw8enJkzZ7a7DAAAAAAAXkYp5e6X6rNtCAAAAAAAjSO8BgAAAACgcYTXAAAAAAA0zmtyz2sAAAAA4LXtmWeeyYIFC/LUU0+1uxSWwcCBA7PRRhulf//+y3yN8BoAAAAAWOksWLAga665ZgYPHpxSSrvL4WXUWvPwww9nwYIFGTJkyDJfZ9sQAAAAAGCl89RTT2XdddcVXK8ESilZd911l3uVvPAaAAAAAFgpCa5XHivyuxJeAwAAAACvO3/4wx9y4IEHZrPNNsuoUaOyxx575De/+U1mzJiRvfbaq09qePzxx/PRj360u4ZddtklN95448te85WvfKVPamsC4TUAAAAA8LpSa81+++2XXXbZJXfeeWdmzZqVr371q7n//vtf9dwLFy5c5rGHH3541llnnfz2t7/NrFmzcs455+Shhx562Wv6IrxenmfoTcJrAAAAAOB15aqrrkr//v0zceLE7raRI0dmxx13TLJ4RfT++++fLbfcMgcffHBqrUmSwYMHd4fLM2fOzC677JIkOeGEE3LooYdm7NixOfTQQ3PCCSfkQx/6UHbZZZdsuummOe20015Uw5133pkbb7wxJ510UlZZZXFMO2TIkOy5555Jkne/+90ZNWpUhg0bljPPPDNJMmnSpDz55JPp7OzMwQcfnCQ577zzMmbMmHR2duajH/1oFi1alCQ5++yzs8UWW2TMmDH5yEc+kiOPPDJJMn/+/Oy6664ZMWJExo0bl3vuuSdJMmHChEycODHbbbddPvvZz2bzzTfPgw8+mCR59tln85a3vKX7vK8IrwEAAACA15Xbbrsto0aNesn+//mf/8mpp56aOXPm5K677sp11133inPOmTMnV1xxRc4///wkybx58/LTn/40N910U0488cQ888wzzxt/++23p7OzMx0dHUud77vf/W5mzZqVmTNn5rTTTsvDDz+cr33ta1l11VUze/bsTJkyJXPnzs3UqVNz3XXXZfbs2eno6MiUKVPy+9//Pl/60pfyi1/8Itddd13mzZvXPe8nPvGJjB8/PrfccksOPvjgHHXUUd19CxYsyPXXX59vfvObOeSQQzJlypQkyRVXXJGRI0dm0KBBr/hz6EnCawAAAACAJYwZMyYbbbRRVllllXR2dmb+/PmveM0+++yTVVddtft8zz33zIABA7Leeutl/fXXX+4tSU477bSMHDky22+/fX73u9/lt7/97YvGTJ8+PbNmzcro0aPT2dmZ6dOn56677spNN92UnXfeOeuss0769++fAw44oPuaG264IR/4wAeSJIceemiuvfba7r4DDjigO0z/0Ic+lMmTJydZHKQfdthhy1V/T+jX53cEAAAAAGijYcOGZdq0aS/ZP2DAgO7jjo6O7j2g+/Xrl2effTZJ8tRTTz3vmtVXX32Z5liyhl/96ldZtGjRi1Zfz5gxI1dccUVuuOGGrLbaatlll11edL9k8d7d48ePz1e/+tXntV988cUv+WwvZ8ln2HjjjbPBBhvkyiuvzE033dS9CrsvWXkNAAAAALyu7Lrrrnn66ae795JOkltuuSXXXHPNy143ePDgzJo1K0nyox/96FXVsNlmm6WrqyvHH398957a8+fPz09+8pM8+uijedOb3pTVVlst8+bNyy9+8Yvu6/r379+9Bcm4ceMybdq0PPDAA0mSRx55JHfffXdGjx6dn//85/njH/+YhQsXPq/WHXbYIRdccEGSZMqUKd37fC/N4YcfnkMOOeR5K7L7kvAaAAAAAHhdKaXkoosuyhVXXJHNNtssw4YNy+c+97n8zd/8zcted/zxx+eTn/xkurq6eiTMPeuss3L//ffnLW95S7beeutMmDAh66+/fnbfffcsXLgwW221VSZNmpTtt9+++5ojjjgiI0aMyMEHH5yhQ4fmpJNOym677ZYRI0bkHe94R+67775suOGG+fznP58xY8Zk7NixGTx4cNZee+0kyemnn55zzjknI0aMyPe///1861vfesn69tlnnzz++ONt2TIkScpzqf5rSVdXV505c2a7ywAAAAAAesncuXOz1VZbtbuMxnr88cezxhprZOHChdlvv/3yoQ99KPvtt99yzTFz5sz84z/+4yuuSF9WS/udlVJm1Vq7ljbeymsAAAAAgNeYE044IZ2dndl6660zZMiQvPvd716u67/2ta/lve9974v20+5LVl4DAAAAACsdK69XPo1ZeV1K+W4p5YFSym1LtH2jlDKvlHJLKeWiUsobl+j7XCnljlLKr0sp71yiffdW2x2llEm9VS8AAAAAAM3RrxfnPjfJt5NMXqLtZ0k+V2tdWEr5epLPJTm2lDI0yYFJhiV5c5IrSilbtK751yTvSLIgyS9LKZfWWuf0Yt20wT1fHN7uEtpiky/c2u4SAAAAAKCRem3lda316iSPvKDtv2utC1unv0iyUet43yQX1FqfrrX+b5I7koxpfd1Ra72r1vrXJBe0xgIAAAAA8BrWzhc2fijJ5a3jDZP8bom+Ba22l2p/kVLKEaWUmaWUmQ8++GAvlAsAAAAAQF9pS3hdSjkuycIkU3pqzlrrmbXWrlpr16BBg3pqWgAAAACApfrDH/6QAw88MJtttllGjRqVPfbYI7/5zW/6tIb58+fnP/7jP7rPZ86cmaOOOipJMmPGjFx//fV9Wk9P6s09r5eqlDIhyV5JxtVaa6v53iQbLzFso1ZbXqYdAAAAACBJMuqYya88aDnM+sYHX7a/1pr99tsv48ePzwUXXJAk+dWvfpX7778/W2yxxcte25OeC68/8IEPJEm6urrS1dWVZHF4vcYaa2SHHXZY5vkWLlyYfv36PDZeqj5deV1K2T3JZ5PsU2t9YomuS5McWEoZUEoZkmTzJDcl+WWSzUspQ0opb8jilzpe2pc1AwAAAAC80FVXXZX+/ftn4sSJ3W0jR47M2972thxzzDHZeuutM3z48EydOjXJ4iB55513zr777ptNN900kyZNypQpUzJmzJgMHz48d955Z5JkwoQJmThxYrq6urLFFlvkxz/+cZJk0aJFOeaYYzJ69OiMGDEi//7v/54kmTRpUq655pp0dnbmlFNOyYwZM7LXXntl/vz5OeOMM3LKKaeks7Mz11xzTebPn59dd901I0aMyLhx43LPPfc8757bbbddPvvZz/blj/Fl9VqEXko5P8kuSdYrpSxIcnySzyUZkORnpZQk+UWtdWKt9fZSyg+SzMni7UQ+Xmtd1JrnyCQ/TdKR5Lu11tt7q2YAAAAAgGVx2223ZdSoUS9qv/DCCzN79uz86le/ykMPPZTRo0dnp512SrJ4ZfbcuXOzzjrrZNNNN83hhx+em266Kd/61rdy+umn59RTT02yeDX1TTfdlDvvvDNvf/vbc8cdd2Ty5MlZe+2188tf/jJPP/10xo4dm9122y1f+9rXcvLJJ3eH3DNmzEiSDB48OBMnTswaa6yRz3zmM0mSvffeO+PHj8/48ePz3e9+N0cddVQuvvjiJMmCBQty/fXXp6Ojo3d/cMuh18LrWutBS2k++2XGfznJl5fSflmSy3qwNAAAAACAXnHttdfmoIMOSkdHRzbYYIPsvPPO+eUvf5m11loro0ePzt/+7d8mSTbbbLPstttuSZLhw4fnqquu6p7jfe97X1ZZZZVsvvnm2XTTTTNv3rz893//d2655ZZMmzYtSfLoo4/mt7/9bd7whjcsc2033HBDLrzwwiTJoYce+rxV1gcccECjguukDXteAwAAAACs7IYNG9YdJC+rAQMGdB+vssoq3eerrLJKFi5c2N3X2rXieee11px++ul55zvf+by+51Zav1qrr756j8zTk/p0z2sAAAAAgNeCXXfdNU8//XTOPPPM7rZbbrklb3zjGzN16tQsWrQoDz74YK6++uqMGTNmueb+4Q9/mGeffTZ33nln7rrrrrz1rW/NO9/5znznO9/JM888kyT5zW9+k7/85S9Zc80189hjjy11nhf27bDDDt0vl5wyZUp23HHH5X3sPmXlNQAAAADAciql5KKLLsqnPvWpfP3rX8/AgQMzePDgnHrqqXn88cczcuTIlFLyz//8z/mbv/mbzJs3b5nn3mSTTTJmzJj8+c9/zhlnnJGBAwfm8MMPz/z587Ptttum1ppBgwbl4osvzogRI9LR0ZGRI0dmwoQJ2Wabbbrn2XvvvbP//vvnkksuyemnn57TTz89hx12WL7xjW9k0KBBOeecc3rjR9NjSq213TX0uK6urjpz5sx2l8FyuOeLw9tdQlts8oVb210CAAAAwEpp7ty52WqrrdpdRo+bMGFC9tprr+y///7tLqXHLe13VkqZVWvtWtp424YAAAAAANA4tg0BAAAAAGiIc889t90lNIaV1wAAAAAANI6V1wAAAMDrjncvATSfldcAAAAAADSO8BoAAAAAgMYRXgMAAAAArIBSSo4++uju85NPPjknnHDCcs1x+eWXp6urK0OHDs0222zTPd+ECRMybdq0nix3pWPPawAAAABgpdfTe9kvyx7xAwYMyIUXXpjPfe5zWW+99Zb7HrfddluOPPLI/OQnP8mWW26ZRYsW5cwzz1yRcl9k0aJF6ejo6JG52sXKawAAAACAFdCvX78cccQROeWUU17UN3/+/Oy6664ZMWJExo0bl3vuuedFY/75n/85xx13XLbccsskSUdHRz72sY9191999dXZYYcdsummm3avwp4xY0b22muv7jFHHnlkzj333CTJ4MGDc+yxx2bbbbfND3/4wwwePDjHH398tt122wwfPjzz5s3rycfvdcJrAAAAAIAV9PGPfzxTpkzJo48++rz2T3ziExk/fnxuueWWHHzwwTnqqKNedO1tt92WUaNGveTc9913X6699tr8+Mc/zqRJk5apnnXXXTc333xzDjzwwCTJeuutl5tvvjkf+9jHcvLJJy/Hk7Wf8BoAAAAAYAWttdZa+eAHP5jTTjvtee033HBDPvCBDyRJDj300Fx77bXLPfe73/3urLLKKhk6dGjuv//+Zbrm/e9///PO3/Oe9yRJRo0alfnz5y93De0kvAYAAAAAeBU+9alP5eyzz85f/vKX5bpu2LBhmTVr1kv2DxgwoPu41ppk8VYlzz77bHf7U0899bxrVl999aXO0dHRkYULFy5Xfe0mvAYAAAAAeBXWWWedvO9978vZZ5/d3bbDDjvkggsuSJJMmTIlO+6444uuO+aYY/KVr3wlv/nNb5Ikzz77bM4444yXvdff/d3fZc6cOXn66afzpz/9KdOnT+/BJ2mWfu0uAAAAAABgZXf00Ufn29/+dvf56aefnsMOOyzf+MY3MmjQoJxzzjkvumbEiBE59dRTc9BBB+WJJ55IKeV5L2Ncmo033jjve9/7svXWW2fIkCHZZpttevxZmqI8t9z8taSrq6vOnDmz3WWwHO754vB2l9AWm3zh1naXAAAA8Lrk36Gw8ps7d2622mqrdpfBclja76yUMqvW2rW08bYNAQAAAACgcYTXAAAAAAA0jvAaAAAAAIDGEV4DAAAAANA4wmsAAAAAABpHeA0AAAAAQOMIrwEAAAAAVkBHR0c6OzszbNiwjBw5Mv/yL/+SZ599Nkkyc+bMHHXUUT12r1NPPTVPPPFE9/kee+yRP/3pTy85/pprrsmwYcPS2dmZJ598crnudfHFF2fOnDnd51/4whdyxRVXLHfNr1a/Pr8jAAAAAEAPG3v62B6d77pPXPeKY1ZdddXMnj07SfLAAw/kAx/4QP785z/nxBNPTFdXV7q6unqsnlNPPTWHHHJIVltttSTJZZdd9rLjp0yZks997nM55JBDlvteF198cfbaa68MHTo0SfLFL35x+QvuAVZeAwAAAAC8Suuvv37OPPPMfPvb306tNTNmzMhee+2VJPn5z3+ezs7OdHZ2Zptttsljjz2W++67LzvttFM6Ozuz9dZb55prrkmSfOxjH0tXV1eGDRuW448/Pkly2mmn5fe//33e/va35+1vf3uSZPDgwXnooYfyl7/8JXvuuWdGjhyZrbfeOlOnTs1ZZ52VH/zgB/m///f/5uCDD87jjz+ecePGZdttt83w4cNzySWXdNc9efLkjBgxIiNHjsyhhx6a66+/PpdeemmOOeaYdHZ25s4778yECRMybdq0JMn06dOzzTbbZPjw4fnQhz6Up59+urue448/vvse8+bNe9U/UyuvAQAAAAB6wKabbppFixblgQceeF77ySefnH/913/N2LFj8/jjj2fgwIE588wz8853vjPHHXdcFi1a1L0lyJe//OWss846WbRoUcaNG5dbbrklRx11VL75zW/mqquuynrrrfe8uf/rv/4rb37zm/OTn/wkSfLoo49m7bXXzrXXXpu99tor+++/fxYuXJiLLrooa621Vh566KFsv/322WeffTJnzpycdNJJuf7667PeeuvlkUceyTrrrJN99tmn+9olPfXUU5kwYUKmT5+eLbbYIh/84Afzne98J5/61KeSJOutt15uvvnm/Nu//VtOPvnknHXWWa/q52nlNQAAAABALxo7dmw+/elP57TTTsuf/vSn9OvXL6NHj84555yTE044IbfeemvWXHPNJMkPfvCDbLvtttlmm21y++23P2/v6aUZPnx4fvazn+XYY4/NNddck7XXXvtFY2qt+fznP58RI0bkH/7hH3Lvvffm/vvvz5VXXpkDDjigOxBfZ511XvZev/71rzNkyJBsscUWSZLx48fn6quv7u5/z3vekyQZNWpU5s+fv8w/n5civAYAAAAA6AF33XVXOjo6sv766z+vfdKkSTnrrLPy5JNPZuzYsZk3b1522mmnXH311dlwww0zYcKETJ48Of/7v/+bk08+OdOnT88tt9ySPffcM0899dTL3nOLLbbIzTffnOHDh+ef/umflro/9ZQpU/Lggw9m1qxZmT17djbYYINXnHdFDBgwIMniF1kuXLjwVc8nvAYAAAAAeJUefPDBTJw4MUceeWRKKc/ru/POOzN8+PAce+yxGT16dObNm5e77747G2ywQT7ykY/k8MMPz80335w///nPWX311bP22mvn/vvvz+WXX949x5prrpnHHnvsRff9/e9/n9VWWy2HHHJIjjnmmNx8880vGvPoo49m/fXXT//+/XPVVVfl7rvvTpLsuuuu+eEPf5iHH344SfLII4+87L3e+ta3Zv78+bnjjjuSJN///vez8847r+BP7JXZ8xoAAAAAYAU8+eST6ezszDPPPJN+/frl0EMPzac//ekXjTv11FNz1VVXZZVVVsmwYcPyrne9KxdccEG+8Y1vpH///lljjTUyefLkDBkyJNtss0223HLLbLzxxhk7dmz3HEcccUR23333vPnNb85VV13V3X7rrbfmmGOOySqrrJL+/fvnO9/5zovuf/DBB2fvvffO8OHD09XVlS233DJJMmzYsBx33HHZeeed09HRkW222SbnnntuDjzwwHzkIx/Jaaed1v2ixiQZOHBgzjnnnBxwwAFZuHBhRo8enYkTJ/bkj/R5Sq211yZvl66urjpz5sx2l8FyuOeLw9tdQlts8oVb210CAADA65J/h8LKb+7cudlqq63aXQbLYWm/s1LKrFpr19LG2zYEAAAAAIDGEV4DAAAAANA4wmsAAAAAABpHeA0AAAAAQOMIrwEAAAAAaBzhNQAAAAAAjSO8BgAAAABYAQsWLMi+++6bzTffPJtttlk++clP5q9//Wtmz56dyy67rHvcCSeckJNPPrmNla6c+rW7AAAAAACAV+vnO+3co/PtfPXPX7a/1pr3vOc9+djHPpZLLrkkixYtyhFHHJHjjjsuw4YNy8yZM7PHHnv0SC2LFi1KR0dHj8y1MrHyGgAAAABgOV155ZUZOHBgDjvssCRJR0dHTjnllJx11ln57Gc/m6lTp6azszNTp05NksyZMye77LJLNt1005x22mnd85x33nkZM2ZMOjs789GPfjSLFi1Kkqyxxho5+uijM3LkyNxwww19/4ANILwGAAAAAFhOt99+e0aNGvW8trXWWiuDBw/OP/3TP+X9739/Zs+enfe///1Jknnz5uWnP/1pbrrpppx44ol55plnMnfu3EydOjXXXXddZs+enY6OjkyZMiVJ8pe//CXbbbddfvWrX+Vtb3tbnz9fE9g2BAAAAACgl+25554ZMGBABgwYkPXXXz/3339/pk+fnlmzZmX06NFJkieffDLrr79+ksUrud/73ve2s+S2E14DAAAAACynoUOHZtq0ac9r+/Of/5x77rkn/fq9OHYdMGBA93FHR0cWLlyYWmvGjx+fr371qy8aP3DgwNflPtdLsm0IAAAAAMByGjduXJ544olMnjw5yeKXKh599NGZMGFCNthggzz22GPLNMe0adPywAMPJEkeeeSR3H333b1a98pEeA0AAAAAsJxKKbnooovywx/+MJtvvnm22GKLDBw4MF/5ylfy9re/PXPmzHneCxuXZujQoTnppJOy2267ZcSIEXnHO96R++67rw+fotlsGwIAAAAArPR2vvrnfX7PjTfeOP/5n//5ovYBAwbkl7/85Uted9ttt3Ufv//97+9+qeOSHn/88Z4pciVm5TUAAAAAAI0jvAYAAAAAoHGE1wAAAAAANI7wGgAAAACAxhFeAwAAAADQOMJrAAAAAAAaR3gNAAAAALACOjo60tnZma233joHHHBAnnjiiaWO22GHHfq4steGfu0uAAAAAADg1fr20f/Zo/Md+S97v+KYVVddNbNnz06SHHzwwTnjjDPy6U9/urt/4cKF6devX66//voere31wsprAAAAAIBXaccdd8wdd9yRGTNmZMcdd8w+++yToUOHJknWWGON7nFf//rXM3z48IwcOTKTJk1Kktx5553ZfffdM2rUqOy4446ZN29eW56haay8BgAAAAB4FRYuXJjLL788u+++e5Lk5ptvzm233ZYhQ4Y8b9zll1+eSy65JDfeeGNWW221PPLII0mSI444ImeccUY233zz3Hjjjfk//+f/5Morr+zz52iaXguvSynfTbJXkgdqrVu32tZJMjXJ4CTzk7yv1vrHUkpJ8q0keyR5IsmEWuvNrWvGJ/mn1rQn1Vq/11s1AwAAAAAsqyeffDKdnZ1JFq+8/vCHP5zrr78+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\n",
      "text/plain": [
       "<Figure size 1800x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Gender, 補1 代表未知\n",
    "train['Gender'] = train['Gender'].map({'Male':0, 'Female':2})\n",
    "train['Gender'] = train['Gender'].fillna(1)\n",
    "sns.countplot(train['Gender'], hue = train['Churn Category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "e4992728",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    2731\n",
       "2.0    2662\n",
       "1.0    1650\n",
       "Name: Gender, dtype: int64"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Gender'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "eca40188",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "46.747821249768215"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Age'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "b6ad30e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Age\n",
    "# train['Age'] = train['Age'].fillna(train['Age'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "f4c94ac0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Under 30\n",
    "# filt = train['Age'] >= 30\n",
    "# train.loc[filt, [\"Under 30\"]] = \"No\"\n",
    "# filt = train['Age'] < 30\n",
    "# train.loc[filt, [\"Under 30\"]] = \"Yes\"\n",
    "# # train['Under 30'] = train['Under 30'].map({'Yes':1, 'No':0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "740744e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Senior Citizen(老人)\n",
    "# filt = train[\"Age\"] >= 65\n",
    "# train.loc[filt, [\"Senior Citizen\"]] = \"Yes\"\n",
    "# # train[\"Senior Citizen\"] = train[\"Senior Citizen\"].fillna(\"No\")\n",
    "# # train[\"Senior Citizen\"] = train[\"Senior Citizen\"].map({\"Yes\":1, \"No\":0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "44fce8c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age    23.907547\n",
       "dtype: float64"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filt1 = train['Age'] < 30\n",
    "train.loc[filt1, ['Age']].mean() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "c4a90f52",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Age,Under 30,Senior Citizen\n",
    "#Age<30 u30補Yes \n",
    "filt1 = train['Age'] < 30\n",
    "mean_u30 = train.loc[filt1, ['Age']].mean() \n",
    "filt2 = train[\"Under 30\"].isnull()\n",
    "train.loc[(filt1 & filt2), [\"Under 30\"]] = train.loc[(filt1 & filt2), [\"Under 30\"]].fillna('Yes')\n",
    "\n",
    "#Age>=65 SC補Yes\n",
    "filt1 = train['Age'] >= 65\n",
    "mean_SC = train.loc[filt1, ['Age']].mean() \n",
    "filt2 = train[\"Senior Citizen\"].isnull()\n",
    "train.loc[(filt1 & filt2), [\"Senior Citizen\"]] = train.loc[(filt1 & filt2), [\"Senior Citizen\"]].fillna('Yes')\n",
    "\n",
    "\n",
    "filt0 = train['Age'].isnull()\n",
    "filt1 = train['Age'] >= 30\n",
    "filt2 = train['Age'] < 65\n",
    "mean_30to65 = train.loc[(filt1&filt2), ['Age']].mean()\n",
    "\n",
    "#u30 = Yes Age 補<30的 mean\n",
    "filt3 = train[\"Under 30\"] == 'Yes'\n",
    "train.loc[(filt0 & filt3), ['Age']] = train.loc[(filt0 & filt3), ['Age']].fillna(mean_u30)\n",
    "\n",
    "#SC = Yes Age 補>=65的 mean\n",
    "filt3 = train[\"Senior Citizen\"] == 'Yes'\n",
    "train.loc[(filt0 & filt3), ['Age']] = train.loc[(filt0 & filt3), ['Age']].fillna(mean_SC)\n",
    "\n",
    "#u30 = No & SC = No & Age 補30=<Age<65的 mean\n",
    "filt3 = train[\"Under 30\"] == 'No'\n",
    "filt4 = train[\"Senior Citizen\"] == 'No'\n",
    "train.loc[(filt0 & filt3 & filt4), ['Age']] = train.loc[(filt0 & filt3 & filt4), ['Age']].fillna(mean_30to65)\n",
    "\n",
    "#u30 = null & SC = null & Age 補mean\n",
    "age_mean = train['Age'].mean()\n",
    "\n",
    "train['Age'] = train['Age'].fillna(age_mean)\n",
    "\n",
    "train[\"Under 30\"] = train[\"Under 30\"].fillna('No')\n",
    "train[\"Senior Citizen\"] = train[\"Senior Citizen\"].fillna('No')\n",
    "\n",
    "train['Under 30'] = train['Under 30'].map({'Yes':1, 'No':0})\n",
    "train[\"Senior Citizen\"] = train[\"Senior Citizen\"].map({\"Yes\":1, \"No\":0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "114bb137",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.16953002981683943\n",
      "0.14241090444412893\n"
     ]
    }
   ],
   "source": [
    "print(train['Under 30'].mean())\n",
    "print(train[\"Senior Citizen\"].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "f4f9eb5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Age    23.907547\n",
      "dtype: float64\n",
      "Age    47.036173\n",
      "dtype: float64\n",
      "Age    72.407735\n",
      "dtype: float64\n",
      "46.67527672739572\n"
     ]
    }
   ],
   "source": [
    "print(mean_u30)\n",
    "print(mean_30to65)\n",
    "print(mean_SC)\n",
    "print(age_mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "id": "8c324645",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Married\n",
    "train[\"Married\"] = train[\"Married\"].fillna(\"No\")\n",
    "train[\"Married\"] = train[\"Married\"].map({\"Yes\":1, \"No\":0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "0b56614a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Dependents, Number of Dependents\n",
    "# train[\"Number of Dependents\"] = train[\"Number of Dependents\"].fillna(0)\n",
    "# filt = train[\"Number of Dependents\"] > 0\n",
    "# train.loc[filt, [\"Dependents\"]] = \"Yes\"\n",
    "# train[\"Dependents\"] = train[\"Dependents\"].fillna(\"No\")\n",
    "# train[\"Dependents\"] = train[\"Dependents\"].map({\"Yes\":1, \"No\":0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "0ad07793",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"None of [Index([(True, True, False, True, True, True, False, False, True, False, False, False, True, True, True, False, False, False, True, False, True, True, True, True, True, False, True, False, True, False, False, False, True, True, True, False, False, True, True, False, True, False, False, False, True, False, False, True, True, False, False, True, False, False, True, False, False, True, False, False, False, True, False, True, True, True, True, False, False, True, False, False, True, True, True, False, False, False, True, True, False, True, True, True, True, True, True, True, False, True, True, False, False, False, True, True, True, True, False, True, ...), (False, False, True, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, True, True, True, True, False, False, True, False, True, True, True, False, False, False, False, True, True, False, False, False, False, False, True, True, False, False, False, True, False, False, True, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, True, True, False, False, False, False, True, False, ...)], dtype='object')] are in the [index]\"",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-209-ff070eb9dd47>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mfilt\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtrain\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"Dependents\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m\"No\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mfilt1\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtrain\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"Number of Dependents\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0misnull\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mtrain\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilt\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mfilt1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;34m\"Number of Dependents\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtrain\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilt\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mfilt1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;34m\"Number of Dependents\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfillna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pandas\\core\\indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    871\u001b[0m                     \u001b[1;31m# AttributeError for IntervalTree get_value\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    872\u001b[0m                     \u001b[1;32mpass\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 873\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    874\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    875\u001b[0m             \u001b[1;31m# we by definition only have the 0th axis\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pandas\\core\\indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[1;34m(self, tup)\u001b[0m\n\u001b[0;32m   1051\u001b[0m         \u001b[1;31m# ugly hack for GH #836\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1052\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_multi_take_opportunity\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1053\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_multi_take\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1054\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1055\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_getitem_tuple_same_dim\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pandas\\core\\indexing.py\u001b[0m in \u001b[0;36m_multi_take\u001b[1;34m(self, tup)\u001b[0m\n\u001b[0;32m   1003\u001b[0m         d = {\n\u001b[0;32m   1004\u001b[0m             \u001b[0maxis\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1005\u001b[1;33m             \u001b[1;32mfor\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_AXIS_ORDERS\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1006\u001b[0m         }\n\u001b[0;32m   1007\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_reindex_with_indexers\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0md\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mallow_dups\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pandas\\core\\indexing.py\u001b[0m in \u001b[0;36m<dictcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m   1003\u001b[0m         d = {\n\u001b[0;32m   1004\u001b[0m             \u001b[0maxis\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1005\u001b[1;33m             \u001b[1;32mfor\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_AXIS_ORDERS\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1006\u001b[0m         }\n\u001b[0;32m   1007\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_reindex_with_indexers\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0md\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mallow_dups\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pandas\\core\\indexing.py\u001b[0m in \u001b[0;36m_get_listlike_indexer\u001b[1;34m(self, key, axis, raise_missing)\u001b[0m\n\u001b[0;32m   1252\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0max\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1253\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1254\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_validate_read_indexer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mraise_missing\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1255\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mkeyarr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1256\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pandas\\core\\indexing.py\u001b[0m in \u001b[0;36m_validate_read_indexer\u001b[1;34m(self, key, indexer, axis, raise_missing)\u001b[0m\n\u001b[0;32m   1296\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mmissing\u001b[0m \u001b[1;33m==\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1297\u001b[0m                 \u001b[0maxis_name\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_axis_name\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1298\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1299\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1300\u001b[0m             \u001b[1;31m# We (temporarily) allow for some missing keys with .loc, except in\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: \"None of [Index([(True, True, False, True, True, True, False, False, True, False, False, False, True, True, True, False, False, False, True, False, True, True, True, True, True, False, True, False, True, False, False, False, True, True, True, False, False, True, True, False, True, False, False, False, True, False, False, True, True, False, False, True, False, False, True, False, False, True, False, False, False, True, False, True, True, True, True, False, False, True, False, False, True, True, True, False, False, False, True, True, False, True, True, True, True, True, True, True, False, True, True, False, False, False, True, True, True, True, False, True, ...), (False, False, True, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, True, True, True, True, False, False, True, False, True, True, True, False, False, False, False, True, True, False, False, False, False, False, True, True, False, False, False, True, False, False, True, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, True, True, False, False, False, False, True, False, ...)], dtype='object')] are in the [index]\""
     ]
    }
   ],
   "source": [
    "filt = train[\"Dependents\"] == \"No\"\n",
    "filt1 = train[\"Number of Dependents\"].isnull()\n",
    "train.loc[(filt,filt1), [\"Number of Dependents\"]] = train.loc[(filt,filt1), [\"Number of Dependents\"]].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "54c8f9a6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lat Long</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1381</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1386</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1387</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1403</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1406</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>880 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Lat Long\n",
       "0         NaN\n",
       "5         NaN\n",
       "7         NaN\n",
       "9         NaN\n",
       "32        NaN\n",
       "...       ...\n",
       "1381      NaN\n",
       "1386      NaN\n",
       "1387      NaN\n",
       "1403      NaN\n",
       "1406      NaN\n",
       "\n",
       "[880 rows x 1 columns]"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filt1 = train['Lat Long'].isnull()\n",
    "filt2 = train['Latitude'].isnull()\n",
    "filt3 = train['Longitude'].isnull()\n",
    "filt4 = train['City'].isnull()\n",
    "filt5 = train['Zip Code'].isnull()\n",
    "train.loc[(filt1 & filt2 & filt3 &filt4), ['Lat Long']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "eb58abf2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lat Long</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1394</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1401</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1403</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1405</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1406</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1650 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Lat Long\n",
       "0         NaN\n",
       "5         NaN\n",
       "7         NaN\n",
       "8         NaN\n",
       "9         NaN\n",
       "...       ...\n",
       "1394      NaN\n",
       "1401      NaN\n",
       "1403      NaN\n",
       "1405      NaN\n",
       "1406      NaN\n",
       "\n",
       "[1650 rows x 1 columns]"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filt = train['Lat Long'].isnull()\n",
    "filt1 = train['Latitude'].notnull()\n",
    "train.loc[filt, ['Lat Long']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "9b3aa997",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                             (nan, nan)\n",
       "1       (34.903052, -118.41125100000001)\n",
       "2               (33.721917, -118.043237)\n",
       "3                     (nan, -122.000887)\n",
       "4               (39.672813, -120.456699)\n",
       "                      ...               \n",
       "1404           (37.871415999999996, nan)\n",
       "1405                    (40.448632, nan)\n",
       "1406                          (nan, nan)\n",
       "1407                    (33.688546, nan)\n",
       "1408    (33.956445, -118.35863400000001)\n",
       "Name: new, Length: 7043, dtype: object"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train['new'] = (train['Latitude'], train['Longitude'])\n",
    "\n",
    "\n",
    "train['new'] = list(zip(train['Latitude'],train['Longitude']))\n",
    "train['new']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "93ff940c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                          NaN\n",
       "1       34.903052, -118.411251\n",
       "2       33.721917, -118.043237\n",
       "3       37.305622, -122.000887\n",
       "4       39.672813, -120.456699\n",
       "                 ...          \n",
       "1404    37.871416, -122.246597\n",
       "1405                       NaN\n",
       "1406                       NaN\n",
       "1407    33.688546, -117.788091\n",
       "1408    33.956445, -118.358634\n",
       "Name: Lat Long, Length: 7043, dtype: object"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Lat Long']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "ac6c1eb2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                             (nan, nan)\n",
       "1       (34.903052, -118.41125100000001)\n",
       "2               (33.721917, -118.043237)\n",
       "3                     (nan, -122.000887)\n",
       "4               (39.672813, -120.456699)\n",
       "                      ...               \n",
       "1404           (37.871415999999996, nan)\n",
       "1405                    (40.448632, nan)\n",
       "1406                          (nan, nan)\n",
       "1407                    (33.688546, nan)\n",
       "1408    (33.956445, -118.35863400000001)\n",
       "Name: new, Length: 7043, dtype: object"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['new'] = train[['Latitude', 'Longitude']].apply(tuple, axis=1).tolist()\n",
    "train['new']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "9542cacb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0             NaN\n",
       "1       34.903052\n",
       "2       33.721917\n",
       "3             NaN\n",
       "4       39.672813\n",
       "          ...    \n",
       "1404    37.871416\n",
       "1405    40.448632\n",
       "1406          NaN\n",
       "1407    33.688546\n",
       "1408    33.956445\n",
       "Name: Latitude, Length: 7043, dtype: float64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Latitude']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "a7614245",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0              NaN\n",
       "1      -118.411251\n",
       "2      -118.043237\n",
       "3      -122.000887\n",
       "4      -120.456699\n",
       "           ...    \n",
       "1404           NaN\n",
       "1405           NaN\n",
       "1406           NaN\n",
       "1407           NaN\n",
       "1408   -118.358634\n",
       "Name: Longitude, Length: 7043, dtype: float64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Longitude']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "16ab033e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 7043 entries, 0 to 1408\n",
      "Data columns (total 49 columns):\n",
      " #   Column                             Non-Null Count  Dtype  \n",
      "---  ------                             --------------  -----  \n",
      " 0   Customer ID                        7043 non-null   object \n",
      " 1   Gender                             7043 non-null   float64\n",
      " 2   Age                                7043 non-null   float64\n",
      " 3   Under 30                           7043 non-null   int64  \n",
      " 4   Senior Citizen                     7043 non-null   int64  \n",
      " 5   Married                            7043 non-null   int64  \n",
      " 6   Dependents                         7043 non-null   int64  \n",
      " 7   Number of Dependents               7043 non-null   float64\n",
      " 8   Country                            5393 non-null   object \n",
      " 9   State                              5393 non-null   object \n",
      " 10  City                               5393 non-null   object \n",
      " 11  Zip Code                           5393 non-null   float64\n",
      " 12  Lat Long                           5393 non-null   object \n",
      " 13  Latitude                           5393 non-null   float64\n",
      " 14  Longitude                          5393 non-null   float64\n",
      " 15  Population                         5393 non-null   float64\n",
      " 16  Satisfaction Score                 5393 non-null   float64\n",
      " 17  Quarter                            5393 non-null   object \n",
      " 18  Referred a Friend                  5393 non-null   object \n",
      " 19  Number of Referrals                5393 non-null   float64\n",
      " 20  Tenure in Months                   5393 non-null   float64\n",
      " 21  Offer                              5393 non-null   object \n",
      " 22  Phone Service                      5393 non-null   object \n",
      " 23  Avg Monthly Long Distance Charges  5393 non-null   float64\n",
      " 24  Multiple Lines                     5393 non-null   object \n",
      " 25  Internet Service                   5393 non-null   object \n",
      " 26  Internet Type                      5393 non-null   object \n",
      " 27  Avg Monthly GB Download            5393 non-null   float64\n",
      " 28  Online Security                    5393 non-null   object \n",
      " 29  Online Backup                      5393 non-null   object \n",
      " 30  Device Protection Plan             5393 non-null   object \n",
      " 31  Premium Tech Support               5393 non-null   object \n",
      " 32  Streaming TV                       5393 non-null   object \n",
      " 33  Streaming Movies                   5393 non-null   object \n",
      " 34  Streaming Music                    5393 non-null   object \n",
      " 35  Unlimited Data                     5393 non-null   object \n",
      " 36  Contract                           5393 non-null   object \n",
      " 37  Paperless Billing                  5393 non-null   object \n",
      " 38  Payment Method                     5393 non-null   object \n",
      " 39  Monthly Charge                     5393 non-null   float64\n",
      " 40  Total Charges                      5393 non-null   float64\n",
      " 41  Total Refunds                      5393 non-null   float64\n",
      " 42  Total Extra Data Charges           5393 non-null   float64\n",
      " 43  Total Long Distance Charges        5393 non-null   float64\n",
      " 44  Total Revenue                      5393 non-null   float64\n",
      " 45  Churn Category                     4226 non-null   object \n",
      " 46  is_train                           7043 non-null   int64  \n",
      " 47  Count_merge                        7043 non-null   int64  \n",
      " 48  new                                7043 non-null   object \n",
      "dtypes: float64(18), int64(6), object(25)\n",
      "memory usage: 2.8+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "a81723dd",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                    NaN\n",
       "1               Rosamond\n",
       "2       Huntington Beach\n",
       "3               San Jose\n",
       "4                Calpine\n",
       "              ...       \n",
       "1404            Berkeley\n",
       "1405            Anderson\n",
       "1406                 NaN\n",
       "1407              Irvine\n",
       "1408           Inglewood\n",
       "Name: City, Length: 7043, dtype: object"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['City']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "b39d6a9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                 NaN\n",
       "1                 NaN\n",
       "2       United States\n",
       "3       United States\n",
       "4       United States\n",
       "            ...      \n",
       "1404    United States\n",
       "1405    United States\n",
       "1406              NaN\n",
       "1407    United States\n",
       "1408    United States\n",
       "Name: Country, Length: 7043, dtype: object"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Country']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "ca7eeacb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0              NaN\n",
       "1       California\n",
       "2              NaN\n",
       "3       California\n",
       "4       California\n",
       "           ...    \n",
       "1404    California\n",
       "1405    California\n",
       "1406           NaN\n",
       "1407    California\n",
       "1408    California\n",
       "Name: State, Length: 7043, dtype: object"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['State']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "444e446a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # drop feature\n",
    "# train = train.drop(['Country', 'State', 'City', 'Zip Code', 'Lat Long', 'Latitude', 'Longitude'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "7510dade",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Number of Dependents', ylabel='count'>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(train['Number of Dependents'], hue = train['Churn Category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "bc5f7d96",
   "metadata": {},
   "outputs": [],
   "source": [
    "# population 來自 Zipcode, 沒有Zipcode暫時補mean\n",
    "train['Population'] = train['Population'].fillna(train['Population'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "f299d3c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Satisfaction Score 暫時補平均\n",
    "train['Satisfaction Score'] = train['Satisfaction Score'].fillna(train['Satisfaction Score'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "9a3766ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 只有Q3、nan兩種值, Q3的改成1、nan的補0\n",
    "train['Quarter'] = train['Quarter'].map({'Q3':1})\n",
    "train['Quarter'] = train['Quarter'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "ccace7b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Referred a Friend\n",
    "filt = train['Number of Referrals'] > 0\n",
    "train.loc[filt, ['Referred a Friend']] = 'Yes'\n",
    "train['Referred a Friend'] = train['Referred a Friend'].fillna('No')\n",
    "train['Referred a Friend'] = train['Referred a Friend'].map({'Yes':1, 'No':0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "c8ea5e8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Number of Referrals 補零 (從Satisfation Scaore跟Number of Referrals的關係圖中, 沒有發現特別的相關性)\n",
    "train['Number of Referrals'] = train['Number of Referrals'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "d47f73ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.53866122751715\n"
     ]
    }
   ],
   "source": [
    "# Tenure in Months, 補平均數, note:發現使用月數與最後客戶有沒有流失有非常大的關係, 超過20個月以上的用戶幾乎沒有流失!! 目前感覺補得不太好\n",
    "print(train['Tenure in Months'].mean())\n",
    "train['Tenure in Months'] = train['Tenure in Months'].fillna(train['Tenure in Months'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "a60351b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3718    4631\n",
       "514      643\n",
       "475      598\n",
       "368      458\n",
       "305      397\n",
       "255      316\n",
       "Name: Offer, dtype: int64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Offer, 暫時用Frequency endcoing, 空值補None\n",
    "train['Offer'] = train['Offer'].fillna('None')\n",
    "train['Offer'] = train['Offer'].map({'None':3718, 'Offer B':514, 'Offer E':475, 'Offer D':368, 'Offer A':305, 'Offer C':255})\n",
    "train['Offer'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "9b96b450",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Phone Service\n",
    "train['Phone Service'] = train['Phone Service'].fillna('No')\n",
    "train['Phone Service'] = train['Phone Service'].map({'Yes':1, 'No':0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "dec5fdef",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Avg Monthly Long Distance Charges 補零\n",
    "train['Avg Monthly Long Distance Charges'] = train['Avg Monthly Long Distance Charges'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "a850f213",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Multiple Lines 補No, one hot\n",
    "train['Multiple Lines'] = train['Multiple Lines'].fillna('No')\n",
    "train['Multiple Lines'] = train['Multiple Lines'].map({'Yes':1, 'No':0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "8d2e1741",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2288    2837\n",
       "1852    2299\n",
       "978     1250\n",
       "518      657\n",
       "Name: Internet Type, dtype: int64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Internet Type 補None, frequency endcoding\n",
    "train['Internet Type'] = train['Internet Type'].fillna('None')\n",
    "train['Internet Type'] = train['Internet Type'].map({'None':2288, 'Fiber Optic':1852, 'DSL':978, 'Cable':518})\n",
    "train['Internet Type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "eb1c527b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Avg Monthly GB Download 看Internet Service補, 為Yes補平均 其餘補0\n",
    "filt = train['Internet Service'] == 'Yes'\n",
    "train.loc[filt, 'Avg Monthly GB Download'] = train.loc[filt, 'Avg Monthly GB Download'].fillna(train['Avg Monthly GB Download'].mean())\n",
    "train['Avg Monthly GB Download'] = train['Avg Monthly GB Download'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "75646a95",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Internet Service 看Avg Monthly GB Download為0補No, 不為0補Yes, one hot\n",
    "filt = train['Avg Monthly GB Download'] != 0\n",
    "train.loc[filt, ['Internet Service']] = train.loc[filt, ['Internet Service']].fillna('Yes')\n",
    "train['Internet Service'] = train['Internet Service'].fillna('No')\n",
    "train['Internet Service'] = train['Internet Service'].map({'Yes':1, 'No':0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "9fc990ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Online Security 補No , one hot\n",
    "# Online Backup 補No , one hot\n",
    "# Device Protection Plan 補No , one hot\n",
    "# Premium Tech Support 補No, one hot\n",
    "# Streaming TV\n",
    "# Streaming Movies\n",
    "# Streaming Music\n",
    "# Unlimited Data\n",
    "train['Online Security'] = train['Online Security'].fillna('No')\n",
    "train['Online Backup'] = train['Online Backup'].fillna('No')\n",
    "train['Device Protection Plan'] = train['Device Protection Plan'].fillna('No')\n",
    "train['Premium Tech Support'] = train['Premium Tech Support'].fillna('No')\n",
    "train['Streaming TV'] = train['Streaming TV'].fillna('No')\n",
    "train['Streaming Movies'] = train['Streaming Movies'].fillna('No')\n",
    "train['Streaming Music'] = train['Streaming Music'].fillna('No')\n",
    "train['Unlimited Data'] = train['Unlimited Data'].fillna('No')\n",
    "\n",
    "train['Online Backup'] = train['Online Backup'].map({'Yes':1, 'No':0})\n",
    "train['Online Security'] = train['Online Security'].map({'Yes':1, 'No':0})\n",
    "train['Device Protection Plan'] = train['Device Protection Plan'].map({'Yes':1, 'No':0})\n",
    "train['Premium Tech Support'] = train['Premium Tech Support'].map({'Yes':1, 'No':0})\n",
    "train['Streaming TV'] = train['Streaming TV'].map({'Yes':1, 'No':0})\n",
    "train['Streaming Movies'] = train['Streaming Movies'].map({'Yes':1, 'No':0})\n",
    "train['Streaming Music'] = train['Streaming Music'].map({'Yes':1, 'No':0})\n",
    "train['Unlimited Data'] = train['Unlimited Data'].map({'Yes':1, 'No':0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "80b9f083",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.0    2725\n",
       "1.0    1650\n",
       "3.0    1467\n",
       "2.0    1201\n",
       "Name: Contract, dtype: int64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Contract 空值補1, 代表未知, 月為單位補0, 未知補1, 1年為單位補2, 2年為單位補3\n",
    "sns.countplot(train['Contract'], hue = train['Churn Category'])\n",
    "train['Contract'] = train['Contract'].map({'Month-to-Month':0, 'One Year':2, 'Two Year':3})\n",
    "train['Contract'] = train['Contract'].fillna(1)\n",
    "train['Contract'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "8e0f4bce",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Yes       3183\n",
      "No        2210\n",
      "unknow    1650\n",
      "Name: Paperless Billing, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Paperless Billing,缺值補未知, frequence endcoding\n",
    "train['Paperless Billing'] = train['Paperless Billing'].fillna('unknow')\n",
    "sns.countplot(train['Paperless Billing'], hue = train['Churn Category'])\n",
    "print(train['Paperless Billing'].value_counts())\n",
    "train['Paperless Billing'] = train['Paperless Billing'].map({'Yes':2540, 'No':1763, 'unknow': 1332})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "c9ce9660",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bank Withdrawal    3004\n",
      "Credit Card        2099\n",
      "unknow             1650\n",
      "Mailed Check        290\n",
      "Name: Payment Method, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Payment Method,缺值補未知, frequence endcoding\n",
    "train['Payment Method'] = train['Payment Method'].fillna('unknow')\n",
    "sns.countplot(train['Payment Method'], hue = train['Churn Category'])\n",
    "print(train['Payment Method'].value_counts())\n",
    "train['Payment Method'] = train['Payment Method'].map({'Bank Withdrawal':2399, 'Credit Card':1681, 'unknow': 1327, 'Mailed Check':228})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "f159ef5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Monthly Charge 補平均\n",
    "g = sns.FacetGrid(train, col='Churn Category')\n",
    "g.map(sns.distplot, 'Monthly Charge', kde=False)\n",
    "train['Monthly Charge'] = train['Monthly Charge'].fillna(train['Monthly Charge'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "16de84a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-61-5d247497e26e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# Total Charges ,暫時補均值, Note:未來可以跟付費月數 生成平均每月付費\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mg\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mFacetGrid\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'Churn Category'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mg\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmap\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdistplot\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'Total Charges'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkde\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[0mtrain\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Total Charges'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtrain\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Total Charges'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfillna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Total Charges'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\axisgrid.py\u001b[0m in \u001b[0;36mmap\u001b[1;34m(self, func, *args, **kwargs)\u001b[0m\n\u001b[0;32m    711\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    712\u001b[0m         \u001b[1;31m# Finalize the annotations and layout\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 713\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_finalize_grid\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    714\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    715\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\axisgrid.py\u001b[0m in \u001b[0;36m_finalize_grid\u001b[1;34m(self, axlabels)\u001b[0m\n\u001b[0;32m    813\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mset_axis_labels\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0maxlabels\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    814\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mset_titles\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 815\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtight_layout\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    816\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    817\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mfacet_axis\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrow_i\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcol_j\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmodify_state\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\seaborn\\axisgrid.py\u001b[0m in \u001b[0;36mtight_layout\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m     86\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_tight_layout_pad\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     87\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"pad\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_tight_layout_pad\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 88\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_figure\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtight_layout\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     89\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     90\u001b[0m     def add_legend(self, legend_data=None, title=None, label_order=None,\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\matplotlib\\cbook\\deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[1;34m(*inner_args, **inner_kwargs)\u001b[0m\n\u001b[0;32m    409\u001b[0m                          \u001b[1;32melse\u001b[0m \u001b[0mdeprecation_addendum\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    410\u001b[0m                 **kwargs)\n\u001b[1;32m--> 411\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0minner_args\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0minner_kwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    412\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    413\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\matplotlib\\figure.py\u001b[0m in \u001b[0;36mtight_layout\u001b[1;34m(self, renderer, pad, h_pad, w_pad, rect)\u001b[0m\n\u001b[0;32m   2613\u001b[0m             kwargs = get_tight_layout_figure(\n\u001b[0;32m   2614\u001b[0m                 \u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0msubplotspec_list\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2615\u001b[1;33m                 pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)\n\u001b[0m\u001b[0;32m   2616\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2617\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msubplots_adjust\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\matplotlib\\tight_layout.py\u001b[0m in \u001b[0;36mget_tight_layout_figure\u001b[1;34m(fig, axes_list, subplotspec_list, renderer, pad, h_pad, w_pad, rect)\u001b[0m\n\u001b[0;32m    306\u001b[0m                                      \u001b[0msubplot_list\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0msubplot_list\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    307\u001b[0m                                      \u001b[0max_bbox_list\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0max_bbox_list\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 308\u001b[1;33m                                      pad=pad, h_pad=h_pad, w_pad=w_pad)\n\u001b[0m\u001b[0;32m    309\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    310\u001b[0m     \u001b[1;31m# kwargs can be none if tight_layout fails...\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\matplotlib\\tight_layout.py\u001b[0m in \u001b[0;36mauto_adjust_subplotpars\u001b[1;34m(fig, renderer, nrows_ncols, num1num2_list, subplot_list, ax_bbox_list, pad, h_pad, w_pad, rect)\u001b[0m\n\u001b[0;32m     82\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0max\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_visible\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     83\u001b[0m                 \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 84\u001b[1;33m                     \u001b[0mbb\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0max\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_tightbbox\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfor_layout_only\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     85\u001b[0m                 \u001b[1;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     86\u001b[0m                     \u001b[0mbb\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0max\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_tightbbox\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\matplotlib\\axes\\_base.py\u001b[0m in \u001b[0;36mget_tightbbox\u001b[1;34m(self, renderer, call_axes_locator, bbox_extra_artists, for_layout_only)\u001b[0m\n\u001b[0;32m   4193\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mclip_extent\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4194\u001b[0m                 clip_extent = mtransforms.Bbox.intersection(\n\u001b[1;32m-> 4195\u001b[1;33m                     clip_extent, axbbox)\n\u001b[0m\u001b[0;32m   4196\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mall\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mclip_extent\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mextents\u001b[0m \u001b[1;33m==\u001b[0m \u001b[0maxbbox\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mextents\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4197\u001b[0m                     \u001b[1;31m# clip extent is inside the axes bbox so don't check\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\matplotlib\\transforms.py\u001b[0m in \u001b[0;36mintersection\u001b[1;34m(bbox1, bbox2)\u001b[0m\n\u001b[0;32m    676\u001b[0m         \u001b[1;32mNone\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mthey\u001b[0m \u001b[0mdon\u001b[0m\u001b[0;31m'\u001b[0m\u001b[0mt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    677\u001b[0m         \"\"\"\n\u001b[1;32m--> 678\u001b[1;33m         \u001b[0mx0\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmaximum\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbbox1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mxmin\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbbox2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mxmin\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    679\u001b[0m         \u001b[0mx1\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mminimum\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbbox1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mxmax\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbbox2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mxmax\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    680\u001b[0m         \u001b[0my0\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmaximum\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbbox1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mymin\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbbox2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mymin\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\matplotlib\\transforms.py\u001b[0m in \u001b[0;36mxmin\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    310\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mxmin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    311\u001b[0m         \u001b[1;34m\"\"\"The left edge of the bounding box.\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 312\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_points\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    313\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    314\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\matplotlib\\transforms.py\u001b[0m in \u001b[0;36mget_points\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1050\u001b[0m                  \u001b[1;33m[\u001b[0m\u001b[0mp\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mp\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1051\u001b[0m                  \u001b[1;33m[\u001b[0m\u001b[0mp\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mp\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1052\u001b[1;33m                  [p[1, 0], p[1, 1]]])\n\u001b[0m\u001b[0;32m   1053\u001b[0m             \u001b[0mpoints\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mma\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfilled\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpoints\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0.0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1054\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\matplotlib\\transforms.py\u001b[0m in \u001b[0;36mtransform\u001b[1;34m(self, values)\u001b[0m\n\u001b[0;32m   1420\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1421\u001b[0m         \u001b[1;31m# Transform the values\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1422\u001b[1;33m         \u001b[0mres\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtransform_affine\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtransform_non_affine\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1423\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1424\u001b[0m         \u001b[1;31m# Convert the result back to the shape of the input values.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\matplotlib\\transforms.py\u001b[0m in \u001b[0;36mtransform_affine\u001b[1;34m(self, points)\u001b[0m\n\u001b[0;32m   2342\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mtransform_affine\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpoints\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2343\u001b[0m         \u001b[1;31m# docstring inherited\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2344\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_affine\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpoints\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2345\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2346\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mtransform_non_affine\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpoints\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\matplotlib\\transforms.py\u001b[0m in \u001b[0;36mget_affine\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   2370\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2371\u001b[0m             return Affine2D(np.dot(self._b.get_affine().get_matrix(),\n\u001b[1;32m-> 2372\u001b[1;33m                                    self._a.get_affine().get_matrix()))\n\u001b[0m\u001b[0;32m   2373\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2374\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0minverted\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mdot\u001b[1;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1296x216 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Total Charges ,暫時補均值, Note:未來可以跟付費月數 生成平均每月付費\n",
    "g = sns.FacetGrid(train, col='Churn Category')\n",
    "g.map(sns.distplot, 'Total Charges', kde=False)\n",
    "train['Total Charges'] = train['Total Charges'].fillna(train['Total Charges'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2eaf69f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Total Refunds 補零\n",
    "g = sns.FacetGrid(train, col='Churn Category')\n",
    "g.map(sns.distplot, 'Total Refunds', kde=False)\n",
    "train['Total Refunds'] = train['Total Refunds'].fillna(0)\n",
    "train['Total Refunds'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6083637",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Total Extra Data Charges, 補零\n",
    "g = sns.FacetGrid(train, col='Churn Category')\n",
    "g.map(sns.distplot, 'Total Extra Data Charges', kde=False)\n",
    "train['Total Extra Data Charges'] = train['Total Extra Data Charges'].fillna(0)\n",
    "train['Total Extra Data Charges'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85eff202",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Total Long Distance Charges, 補零\n",
    "g = sns.FacetGrid(train, col='Churn Category')\n",
    "g.map(sns.distplot, 'Total Long Distance Charges', kde=False)\n",
    "train['Total Long Distance Charges'] = train['Total Long Distance Charges'].fillna(0)\n",
    "train['Total Long Distance Charges'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee3562c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Total Revenue, 補平均\n",
    "g = sns.FacetGrid(train, col='Churn Category')\n",
    "g.map(sns.distplot, 'Total Revenue', kde=False)\n",
    "train['Total Revenue'] = train['Total Revenue'].fillna(train['Total Revenue'].mean())\n",
    "train['Total Revenue'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4efde079",
   "metadata": {},
   "outputs": [],
   "source": [
    "#train['Payment Method'].value_counts()\n",
    "#train['Total Revenue'].sample(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d008061",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Churn Category, 最終要預測的類別, 沒有值的都丟掉\n",
    "filt = train['Churn Category'].notnull()\n",
    "train = train.loc[filt]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26a0ca7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36bd3990",
   "metadata": {},
   "outputs": [],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb72c649",
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Referred a Friend'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a72fd34",
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Number of Referrals']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b3aa31b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Lat Long']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "65b875f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Latitude']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03f504c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Longitude']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74113f97",
   "metadata": {},
   "source": [
    "# 分割資料"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71a7d9e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from xgboost import XGBClassifier\n",
    "from tqdm import trange\n",
    "# train, test 分離 並刪除標記行\n",
    "filt_test = train['is_train'] == 0\n",
    "filt_train = train['is_train'] == 1\n",
    "test = train.loc[filt_test]\n",
    "train = train.loc[filt_train]\n",
    "#print(test)\n",
    "test = test.drop(columns=['Customer ID' ,'is_train', 'Churn Category'])\n",
    "train_y = train['Churn Category']\n",
    "train_x = train.drop(columns=['Customer ID' ,'is_train', 'Churn Category'])\n",
    "print(test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6a6541b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "train_x, val_x, train_y, val_y = train_test_split(train_x, train_y, test_size=0.25, random_state=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6eb27f0",
   "metadata": {},
   "source": [
    "# Model\n",
    "XGboost:https://ithelp.ithome.com.tw/articles/10273094"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8607fcc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "##原始random forest\n",
    "# from sklearn.ensemble import RandomForestClassifier\n",
    "# from sklearn.datasets import make_classification\n",
    "# # X, y = make_classification(n_samples=1000, n_features=4,\n",
    "# #                            n_informative=2, n_redundant=0,\n",
    "# #                            random_state=0, shuffle=False)\n",
    "# clf = RandomForestClassifier(random_state = 2,oob_score=True,max_depth = 9)\n",
    "# clf.fit(train_x, train_y)\n",
    "\n",
    "# print('訓練集: ',clf.score(train_x,train_y))\n",
    "\n",
    "# print('驗證集: ',clf.oob_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30183252",
   "metadata": {},
   "outputs": [],
   "source": [
    "#調參後的random forest\n",
    "# from sklearn.ensemble import RandomForestClassifier\n",
    "# from sklearn.datasets import make_classification\n",
    "\n",
    "# clf = RandomForestClassifier(random_state = 27,oob_score=True, max_depth = 9, min_samples_leaf = 1,max_features=20,n_estimators=173)\n",
    "# clf.fit(train_x, train_y)\n",
    "\n",
    "# print('訓練集: ',clf.score(train_x,train_y))\n",
    "\n",
    "# print('驗證集: ',clf.oob_score_)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e85803a2",
   "metadata": {},
   "source": [
    "訓練集:  0.9047017986746608\n",
    "驗證集:  0.8220258756705585"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83890ed9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# predicted = clf.predict(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e0ad598",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from xgboost import XGBClassifier\n",
    "\n",
    "# 建立 XGBClassifier 模型\n",
    "xgboostModel = XGBClassifier(n_estimators=100, learning_rate= 0.3)\n",
    "# 使用訓練資料訓練模型\n",
    "xgboostModel.fit(train_x, train_y)\n",
    "print('訓練集: ',xgboostModel.score(train_x,train_y))\n",
    "# 使用訓練資料預測分類\n",
    "# predicted = xgboostModel.predict(train_x)\n",
    "\n",
    "# 預測成功的比例\n",
    "print('驗證集: ',xgboostModel.score(val_x,val_y))\n",
    "print('驗證集: ',xgboostModel.oob_score_)\n",
    "\n",
    "# 使用訓練資料預測分類\n",
    "predicted = xgboostModel.predict(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ac4bc9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn import svm\n",
    "# clf=svm.SVC(kernel='rbf',C=1,gamma='auto')\n",
    "# clf.fit(train_x, train_y)\n",
    "\n",
    "# print('驗證集: ', clf.score(val_x, val_y))\n",
    "\n",
    "# predicted = clf.predict(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a84deb4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# #https://ithelp.ithome.com.tw/articles/10187569\n",
    "# from sklearn import ensemble, preprocessing, metrics\n",
    "# from sklearn.model_selection import cross_val_score\n",
    "# from sklearn.model_selection import train_test_split\n",
    "\n",
    "# max_accur = 0\n",
    "# for i in range(10):\n",
    "#     train_x1, val_x, train_y1, val_y = train_test_split(train_x, train_y, test_size=0.1)\n",
    "#     forest = ensemble.RandomForestClassifier(n_estimators = 100)\n",
    "#     forest_fit = forest.fit(train_x1, train_y1)\n",
    "#     # 預測\n",
    "#     val_y_predicted = forest.predict(val_x)\n",
    "#     accuracy = metrics.accuracy_score(val_y, val_y_predicted)\n",
    "#     print('第{}次驗證: '.format(i+1), accuracy)\n",
    "#     if accuracy > max_accur:\n",
    "#         max_accur = accuracy\n",
    "#         max_forest_model = forest\n",
    "\n",
    "# train_y_predicted = max_forest_model.predict(train_x)\n",
    "# accuracy = metrics.accuracy_score(train_y, train_y_predicted)\n",
    "# print('最終驗證: ', accuracy)\n",
    "# #scores = cross_val_score(forest, train_x, train_y, cv = 10)\n",
    "\n",
    "# # 預測\n",
    "# predicted = max_forest_model.predict(test)\n",
    "# # 績效\n",
    "# #print('cross_驗證集: ', scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "149b43d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn import ensemble, preprocessing, metrics\n",
    "# from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# forest = ensemble.RandomForestClassifier(n_estimators = 100)\n",
    "# forest_fit = forest.fit(train_x, train_y)\n",
    "\n",
    "# # 預測\n",
    "# val_y_predicted = forest.predict(val_x)\n",
    "\n",
    "# #scores = cross_val_score(forest, train_x, train_y, cv = 10)\n",
    "\n",
    "# # 績效\n",
    "# accuracy = metrics.accuracy_score(val_y, val_y_predicted)\n",
    "# print('驗證集: ', accuracy)\n",
    "# #print('cross_驗證集: ', scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0e04d6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 預測\n",
    "# predicted = forest.predict(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b0df06d",
   "metadata": {},
   "outputs": [],
   "source": [
    "predicted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2d549a2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "submission = pd.read_csv('./data/sample_submission.csv')"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "d144170b",
   "metadata": {},
   "source": [
    "![image.png](attachment:image.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7569d7fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "submission['Churn Category'] = predicted\n",
    "submission['Churn Category'] = submission['Churn Category'].map({'Attitude':3, 'Competitor':1, 'Dissatisfaction':2, 'Other':5, 'Price':4, 'No Churn':0})\n",
    "submission['Churn Category'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ef5628b",
   "metadata": {},
   "source": [
    "submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "014445a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "local_time = time.localtime() # 取得時間元組\n",
    "timeString = time.strftime(\"%m-%d_%H%M\", local_time) # 轉成想要的字串形式\n",
    "print(timeString)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8fc2bff",
   "metadata": {},
   "outputs": [],
   "source": [
    "submission.to_csv('./submit/sub_{}.csv'.format(timeString), index=False, header=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2cf53aff",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
